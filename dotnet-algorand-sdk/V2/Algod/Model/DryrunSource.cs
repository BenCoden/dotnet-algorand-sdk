/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Algod.Client.SwaggerDateConverter;

namespace Algorand.V2.Algod.Model
{
    /// <summary>
    /// DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.
    /// </summary>
    [DataContract]
    public partial class DryrunSource :  IEquatable<DryrunSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DryrunSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DryrunSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DryrunSource" /> class.
        /// </summary>
        /// <param name="fieldName">FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex]. (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="txnIndex">txnIndex (required).</param>
        /// <param name="appIndex">appIndex (required).</param>
        public DryrunSource(string fieldName = default(string), string source = default(string), long? txnIndex = default, ulong? appIndex = default(ulong?))
        {
            // to ensure "fieldName" is required (not null)
            if (fieldName == null)
            {
                throw new InvalidDataException("fieldName is a required property for DryrunSource and cannot be null");
            }
            else
            {
                this.FieldName = fieldName;
            }
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new InvalidDataException("source is a required property for DryrunSource and cannot be null");
            }
            else
            {
                this.Source = source;
            }
            // to ensure "txnIndex" is required (not null)
            if (txnIndex == null)
            {
                throw new InvalidDataException("txnIndex is a required property for DryrunSource and cannot be null");
            }
            else
            {
                this.TxnIndex = txnIndex;
            }
            // to ensure "appIndex" is required (not null)
            if (appIndex == null)
            {
                throw new InvalidDataException("appIndex is a required property for DryrunSource and cannot be null");
            }
            else
            {
                this.AppIndex = appIndex;
            }
        }
        
        /// <summary>
        /// FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].
        /// </summary>
        /// <value>FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].</value>
        [DataMember(Name="field-name", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets TxnIndex
        /// </summary>
        [DataMember(Name="txn-index", EmitDefaultValue=false)]
        public long? TxnIndex { get; set; }

        /// <summary>
        /// Gets or Sets AppIndex
        /// </summary>
        [DataMember(Name="app-index", EmitDefaultValue=false)]
        public ulong? AppIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DryrunSource {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TxnIndex: ").Append(TxnIndex).Append("\n");
            sb.Append("  AppIndex: ").Append(AppIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DryrunSource);
        }

        /// <summary>
        /// Returns true if DryrunSource instances are equal
        /// </summary>
        /// <param name="input">Instance of DryrunSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DryrunSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.TxnIndex == input.TxnIndex ||
                    (this.TxnIndex != null &&
                    this.TxnIndex.Equals(input.TxnIndex))
                ) && 
                (
                    this.AppIndex == input.AppIndex ||
                    (this.AppIndex != null &&
                    this.AppIndex.Equals(input.AppIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.TxnIndex != null)
                    hashCode = hashCode * 59 + this.TxnIndex.GetHashCode();
                if (this.AppIndex != null)
                    hashCode = hashCode * 59 + this.AppIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
