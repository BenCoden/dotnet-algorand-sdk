/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Algod.Client.SwaggerDateConverter;

namespace Algorand.V2.Algod.Model
{
    /// <summary>
    /// AccountParticipation describes the parameters used by this account in consensus protocol.
    /// </summary>
    [DataContract]
        public partial class AccountParticipation :  IEquatable<AccountParticipation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountParticipation" /> class.
        /// </summary>
        /// <param name="selectionParticipationKey">\\[sel\\] Selection public key (if any) currently registered for this round. (required).</param>
        /// <param name="voteFirstValid">\\[voteFst\\] First round for which this participation is valid. (required).</param>
        /// <param name="voteKeyDilution">\\[voteKD\\] Number of subkeys in each batch of participation keys. (required).</param>
        /// <param name="voteLastValid">\\[voteLst\\] Last round for which this participation is valid. (required).</param>
        /// <param name="voteParticipationKey">\\[vote\\] root participation public key (if any) currently registered for this round. (required).</param>
        public AccountParticipation(byte[] selectionParticipationKey = default(byte[]), int? voteFirstValid = default(int?), int? voteKeyDilution = default(int?), int? voteLastValid = default(int?), byte[] voteParticipationKey = default(byte[]))
        {
            // to ensure "selectionParticipationKey" is required (not null)
            if (selectionParticipationKey == null)
            {
                throw new InvalidDataException("selectionParticipationKey is a required property for AccountParticipation and cannot be null");
            }
            else
            {
                this.SelectionParticipationKey = selectionParticipationKey;
            }
            // to ensure "voteFirstValid" is required (not null)
            if (voteFirstValid == null)
            {
                throw new InvalidDataException("voteFirstValid is a required property for AccountParticipation and cannot be null");
            }
            else
            {
                this.VoteFirstValid = voteFirstValid;
            }
            // to ensure "voteKeyDilution" is required (not null)
            if (voteKeyDilution == null)
            {
                throw new InvalidDataException("voteKeyDilution is a required property for AccountParticipation and cannot be null");
            }
            else
            {
                this.VoteKeyDilution = voteKeyDilution;
            }
            // to ensure "voteLastValid" is required (not null)
            if (voteLastValid == null)
            {
                throw new InvalidDataException("voteLastValid is a required property for AccountParticipation and cannot be null");
            }
            else
            {
                this.VoteLastValid = voteLastValid;
            }
            // to ensure "voteParticipationKey" is required (not null)
            if (voteParticipationKey == null)
            {
                throw new InvalidDataException("voteParticipationKey is a required property for AccountParticipation and cannot be null");
            }
            else
            {
                this.VoteParticipationKey = voteParticipationKey;
            }
        }
        
        /// <summary>
        /// \\[sel\\] Selection public key (if any) currently registered for this round.
        /// </summary>
        /// <value>\\[sel\\] Selection public key (if any) currently registered for this round.</value>
        [DataMember(Name="selection-participation-key", EmitDefaultValue=false)]
        public byte[] SelectionParticipationKey { get; set; }

        /// <summary>
        /// \\[voteFst\\] First round for which this participation is valid.
        /// </summary>
        /// <value>\\[voteFst\\] First round for which this participation is valid.</value>
        [DataMember(Name="vote-first-valid", EmitDefaultValue=false)]
        public int? VoteFirstValid { get; set; }

        /// <summary>
        /// \\[voteKD\\] Number of subkeys in each batch of participation keys.
        /// </summary>
        /// <value>\\[voteKD\\] Number of subkeys in each batch of participation keys.</value>
        [DataMember(Name="vote-key-dilution", EmitDefaultValue=false)]
        public int? VoteKeyDilution { get; set; }

        /// <summary>
        /// \\[voteLst\\] Last round for which this participation is valid.
        /// </summary>
        /// <value>\\[voteLst\\] Last round for which this participation is valid.</value>
        [DataMember(Name="vote-last-valid", EmitDefaultValue=false)]
        public int? VoteLastValid { get; set; }

        /// <summary>
        /// \\[vote\\] root participation public key (if any) currently registered for this round.
        /// </summary>
        /// <value>\\[vote\\] root participation public key (if any) currently registered for this round.</value>
        [DataMember(Name="vote-participation-key", EmitDefaultValue=false)]
        public byte[] VoteParticipationKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountParticipation {\n");
            sb.Append("  SelectionParticipationKey: ").Append(SelectionParticipationKey).Append("\n");
            sb.Append("  VoteFirstValid: ").Append(VoteFirstValid).Append("\n");
            sb.Append("  VoteKeyDilution: ").Append(VoteKeyDilution).Append("\n");
            sb.Append("  VoteLastValid: ").Append(VoteLastValid).Append("\n");
            sb.Append("  VoteParticipationKey: ").Append(VoteParticipationKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountParticipation);
        }

        /// <summary>
        /// Returns true if AccountParticipation instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountParticipation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountParticipation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SelectionParticipationKey == input.SelectionParticipationKey ||
                    (this.SelectionParticipationKey != null &&
                    this.SelectionParticipationKey.Equals(input.SelectionParticipationKey))
                ) && 
                (
                    this.VoteFirstValid == input.VoteFirstValid ||
                    (this.VoteFirstValid != null &&
                    this.VoteFirstValid.Equals(input.VoteFirstValid))
                ) && 
                (
                    this.VoteKeyDilution == input.VoteKeyDilution ||
                    (this.VoteKeyDilution != null &&
                    this.VoteKeyDilution.Equals(input.VoteKeyDilution))
                ) && 
                (
                    this.VoteLastValid == input.VoteLastValid ||
                    (this.VoteLastValid != null &&
                    this.VoteLastValid.Equals(input.VoteLastValid))
                ) && 
                (
                    this.VoteParticipationKey == input.VoteParticipationKey ||
                    (this.VoteParticipationKey != null &&
                    this.VoteParticipationKey.Equals(input.VoteParticipationKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SelectionParticipationKey != null)
                    hashCode = hashCode * 59 + this.SelectionParticipationKey.GetHashCode();
                if (this.VoteFirstValid != null)
                    hashCode = hashCode * 59 + this.VoteFirstValid.GetHashCode();
                if (this.VoteKeyDilution != null)
                    hashCode = hashCode * 59 + this.VoteKeyDilution.GetHashCode();
                if (this.VoteLastValid != null)
                    hashCode = hashCode * 59 + this.VoteLastValid.GetHashCode();
                if (this.VoteParticipationKey != null)
                    hashCode = hashCode * 59 + this.VoteParticipationKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
