/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Algod.Client.SwaggerDateConverter;

namespace Algorand.V2.Algod.Model
{
    /// <summary>
    /// AssetParams specifies the parameters for an asset.  \\[apar\\] when part of an AssetConfig transaction.  Definition: data/transactions/asset.go : AssetParams
    /// </summary>
    [DataContract]
    public partial class AssetParams :  IEquatable<AssetParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AssetParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetParams" /> class.
        /// </summary>
        /// <param name="clawback">\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted..</param>
        /// <param name="creator">The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case. (required).</param>
        /// <param name="decimals">\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive). (required).</param>
        /// <param name="defaultFrozen">\\[df\\] Whether holdings of this asset are frozen by default..</param>
        /// <param name="freeze">\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted..</param>
        /// <param name="manager">\\[m\\] Address of account used to manage the keys of this asset and to destroy it..</param>
        /// <param name="metadataHash">\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application..</param>
        /// <param name="name">\\[an\\] Name of this asset, as supplied by the creator..</param>
        /// <param name="reserve">\\[r\\] Address of account holding reserve (non-minted) units of this asset..</param>
        /// <param name="total">\\[t\\] The total number of units of this asset. (required).</param>
        /// <param name="unitName">\\[un\\] Name of a unit of this asset, as supplied by the creator..</param>
        /// <param name="url">\\[au\\] URL where more information about the asset can be retrieved..</param>
        public AssetParams(string clawback = default(string), string creator = default(string), int? decimals = default(int?), bool? defaultFrozen = default(bool?), string freeze = default(string), string manager = default(string), byte[] metadataHash = default(byte[]), string name = default(string), string reserve = default(string), int? total = default(int?), string unitName = default(string), string url = default(string))
        {
            // to ensure "creator" is required (not null)
            if (creator == null)
            {
                throw new InvalidDataException("creator is a required property for AssetParams and cannot be null");
            }
            else
            {
                this.Creator = creator;
            }
            // to ensure "decimals" is required (not null)
            if (decimals == null)
            {
                throw new InvalidDataException("decimals is a required property for AssetParams and cannot be null");
            }
            else
            {
                this.Decimals = decimals;
            }
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new InvalidDataException("total is a required property for AssetParams and cannot be null");
            }
            else
            {
                this.Total = total;
            }
            this.Clawback = clawback;
            this.DefaultFrozen = defaultFrozen;
            this.Freeze = freeze;
            this.Manager = manager;
            this.MetadataHash = metadataHash;
            this.Name = name;
            this.Reserve = reserve;
            this.UnitName = unitName;
            this.Url = url;
        }
        
        /// <summary>
        /// \\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.
        /// </summary>
        /// <value>\\[c\\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.</value>
        [DataMember(Name="clawback", EmitDefaultValue=false)]
        public string Clawback { get; set; }

        /// <summary>
        /// The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.
        /// </summary>
        /// <value>The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.</value>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public string Creator { get; set; }

        /// <summary>
        /// \\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).
        /// </summary>
        /// <value>\\[dc\\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).</value>
        [DataMember(Name="decimals", EmitDefaultValue=false)]
        public int? Decimals { get; set; }

        /// <summary>
        /// \\[df\\] Whether holdings of this asset are frozen by default.
        /// </summary>
        /// <value>\\[df\\] Whether holdings of this asset are frozen by default.</value>
        [DataMember(Name="default-frozen", EmitDefaultValue=false)]
        public bool? DefaultFrozen { get; set; }

        /// <summary>
        /// \\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.
        /// </summary>
        /// <value>\\[f\\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.</value>
        [DataMember(Name="freeze", EmitDefaultValue=false)]
        public string Freeze { get; set; }

        /// <summary>
        /// \\[m\\] Address of account used to manage the keys of this asset and to destroy it.
        /// </summary>
        /// <value>\\[m\\] Address of account used to manage the keys of this asset and to destroy it.</value>
        [DataMember(Name="manager", EmitDefaultValue=false)]
        public string Manager { get; set; }

        /// <summary>
        /// \\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.
        /// </summary>
        /// <value>\\[am\\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.</value>
        [DataMember(Name="metadata-hash", EmitDefaultValue=false)]
        public byte[] MetadataHash { get; set; }

        /// <summary>
        /// \\[an\\] Name of this asset, as supplied by the creator.
        /// </summary>
        /// <value>\\[an\\] Name of this asset, as supplied by the creator.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// \\[r\\] Address of account holding reserve (non-minted) units of this asset.
        /// </summary>
        /// <value>\\[r\\] Address of account holding reserve (non-minted) units of this asset.</value>
        [DataMember(Name="reserve", EmitDefaultValue=false)]
        public string Reserve { get; set; }

        /// <summary>
        /// \\[t\\] The total number of units of this asset.
        /// </summary>
        /// <value>\\[t\\] The total number of units of this asset.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// \\[un\\] Name of a unit of this asset, as supplied by the creator.
        /// </summary>
        /// <value>\\[un\\] Name of a unit of this asset, as supplied by the creator.</value>
        [DataMember(Name="unit-name", EmitDefaultValue=false)]
        public string UnitName { get; set; }

        /// <summary>
        /// \\[au\\] URL where more information about the asset can be retrieved.
        /// </summary>
        /// <value>\\[au\\] URL where more information about the asset can be retrieved.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetParams {\n");
            sb.Append("  Clawback: ").Append(Clawback).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  DefaultFrozen: ").Append(DefaultFrozen).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  Manager: ").Append(Manager).Append("\n");
            sb.Append("  MetadataHash: ").Append(MetadataHash).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Reserve: ").Append(Reserve).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetParams);
        }

        /// <summary>
        /// Returns true if AssetParams instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Clawback == input.Clawback ||
                    (this.Clawback != null &&
                    this.Clawback.Equals(input.Clawback))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    (this.Decimals != null &&
                    this.Decimals.Equals(input.Decimals))
                ) && 
                (
                    this.DefaultFrozen == input.DefaultFrozen ||
                    (this.DefaultFrozen != null &&
                    this.DefaultFrozen.Equals(input.DefaultFrozen))
                ) && 
                (
                    this.Freeze == input.Freeze ||
                    (this.Freeze != null &&
                    this.Freeze.Equals(input.Freeze))
                ) && 
                (
                    this.Manager == input.Manager ||
                    (this.Manager != null &&
                    this.Manager.Equals(input.Manager))
                ) && 
                (
                    this.MetadataHash == input.MetadataHash ||
                    (this.MetadataHash != null &&
                    this.MetadataHash.Equals(input.MetadataHash))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Reserve == input.Reserve ||
                    (this.Reserve != null &&
                    this.Reserve.Equals(input.Reserve))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.UnitName == input.UnitName ||
                    (this.UnitName != null &&
                    this.UnitName.Equals(input.UnitName))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Clawback != null)
                    hashCode = hashCode * 59 + this.Clawback.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.Decimals != null)
                    hashCode = hashCode * 59 + this.Decimals.GetHashCode();
                if (this.DefaultFrozen != null)
                    hashCode = hashCode * 59 + this.DefaultFrozen.GetHashCode();
                if (this.Freeze != null)
                    hashCode = hashCode * 59 + this.Freeze.GetHashCode();
                if (this.Manager != null)
                    hashCode = hashCode * 59 + this.Manager.GetHashCode();
                if (this.MetadataHash != null)
                    hashCode = hashCode * 59 + this.MetadataHash.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Reserve != null)
                    hashCode = hashCode * 59 + this.Reserve.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.UnitName != null)
                    hashCode = hashCode * 59 + this.UnitName.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Decimals (int?) maximum
            if(this.Decimals > (int?)19)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Decimals, must be a value less than or equal to 19.", new [] { "Decimals" });
            }

            // Decimals (int?) minimum
            if(this.Decimals < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Decimals, must be a value greater than or equal to 0.", new [] { "Decimals" });
            }

            yield break;
        }
    }

}
