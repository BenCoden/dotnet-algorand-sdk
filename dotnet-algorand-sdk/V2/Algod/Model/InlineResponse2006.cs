/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Algod.Client.SwaggerDateConverter;

namespace Algorand.V2.Algod.Model
{
    /// <summary>
    /// Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.
    /// </summary>
    [DataContract]
    public partial class InlineResponse2006 :  IEquatable<InlineResponse2006>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2006() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006" /> class.
        /// </summary>
        /// <param name="assetIndex">The asset index if the transaction was found and it created an asset..</param>
        /// <param name="applicationIndex">The application index if the transaction was found and it created an application..</param>
        /// <param name="closeRewards">Rewards in microalgos applied to the close remainder to account..</param>
        /// <param name="closingAmount">Closing amount for the transaction..</param>
        /// <param name="confirmedRound">The round where this transaction was confirmed, if present..</param>
        /// <param name="poolError">Indicates that the transaction was kicked out of this node&#39;s transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn&#39;t kicked out of this node&#39;s txpool due to an error.  (required).</param>
        /// <param name="receiverRewards">Rewards in microalgos applied to the receiver account..</param>
        /// <param name="senderRewards">Rewards in microalgos applied to the sender account..</param>
        /// <param name="localStateDelta">\\[ld\\] Local state key/value changes for the application being executed by this transaction..</param>
        /// <param name="globalStateDelta">\\[gd\\] Global state key/value changes for the application being executed by this transaction..</param>
        /// <param name="txn">The raw signed transaction. (required).</param>
        public InlineResponse2006(int? assetIndex = default(int?), int? applicationIndex = default(int?), int? closeRewards = default(int?), int? closingAmount = default(int?), int? confirmedRound = default(int?), string poolError = default(string), int? receiverRewards = default(int?), int? senderRewards = default(int?), List<AccountStateDelta> localStateDelta = default(List<AccountStateDelta>), StateDelta globalStateDelta = default(StateDelta), Object txn = default(Object))
        {
            // to ensure "poolError" is required (not null)
            if (poolError == null)
            {
                throw new InvalidDataException("poolError is a required property for InlineResponse2006 and cannot be null");
            }
            else
            {
                this.PoolError = poolError;
            }
            // to ensure "txn" is required (not null)
            if (txn == null)
            {
                throw new InvalidDataException("txn is a required property for InlineResponse2006 and cannot be null");
            }
            else
            {
                this.Txn = txn;
            }
            this.AssetIndex = assetIndex;
            this.ApplicationIndex = applicationIndex;
            this.CloseRewards = closeRewards;
            this.ClosingAmount = closingAmount;
            this.ConfirmedRound = confirmedRound;
            this.ReceiverRewards = receiverRewards;
            this.SenderRewards = senderRewards;
            this.LocalStateDelta = localStateDelta;
            this.GlobalStateDelta = globalStateDelta;
        }
        
        /// <summary>
        /// The asset index if the transaction was found and it created an asset.
        /// </summary>
        /// <value>The asset index if the transaction was found and it created an asset.</value>
        [DataMember(Name="asset-index", EmitDefaultValue=false)]
        public int? AssetIndex { get; set; }

        /// <summary>
        /// The application index if the transaction was found and it created an application.
        /// </summary>
        /// <value>The application index if the transaction was found and it created an application.</value>
        [DataMember(Name="application-index", EmitDefaultValue=false)]
        public int? ApplicationIndex { get; set; }

        /// <summary>
        /// Rewards in microalgos applied to the close remainder to account.
        /// </summary>
        /// <value>Rewards in microalgos applied to the close remainder to account.</value>
        [DataMember(Name="close-rewards", EmitDefaultValue=false)]
        public int? CloseRewards { get; set; }

        /// <summary>
        /// Closing amount for the transaction.
        /// </summary>
        /// <value>Closing amount for the transaction.</value>
        [DataMember(Name="closing-amount", EmitDefaultValue=false)]
        public int? ClosingAmount { get; set; }

        /// <summary>
        /// The round where this transaction was confirmed, if present.
        /// </summary>
        /// <value>The round where this transaction was confirmed, if present.</value>
        [DataMember(Name="confirmed-round", EmitDefaultValue=false)]
        public int? ConfirmedRound { get; set; }

        /// <summary>
        /// Indicates that the transaction was kicked out of this node&#39;s transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn&#39;t kicked out of this node&#39;s txpool due to an error. 
        /// </summary>
        /// <value>Indicates that the transaction was kicked out of this node&#39;s transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn&#39;t kicked out of this node&#39;s txpool due to an error. </value>
        [DataMember(Name="pool-error", EmitDefaultValue=false)]
        public string PoolError { get; set; }

        /// <summary>
        /// Rewards in microalgos applied to the receiver account.
        /// </summary>
        /// <value>Rewards in microalgos applied to the receiver account.</value>
        [DataMember(Name="receiver-rewards", EmitDefaultValue=false)]
        public int? ReceiverRewards { get; set; }

        /// <summary>
        /// Rewards in microalgos applied to the sender account.
        /// </summary>
        /// <value>Rewards in microalgos applied to the sender account.</value>
        [DataMember(Name="sender-rewards", EmitDefaultValue=false)]
        public int? SenderRewards { get; set; }

        /// <summary>
        /// \\[ld\\] Local state key/value changes for the application being executed by this transaction.
        /// </summary>
        /// <value>\\[ld\\] Local state key/value changes for the application being executed by this transaction.</value>
        [DataMember(Name="local-state-delta", EmitDefaultValue=false)]
        public List<AccountStateDelta> LocalStateDelta { get; set; }

        /// <summary>
        /// \\[gd\\] Global state key/value changes for the application being executed by this transaction.
        /// </summary>
        /// <value>\\[gd\\] Global state key/value changes for the application being executed by this transaction.</value>
        [DataMember(Name="global-state-delta", EmitDefaultValue=false)]
        public StateDelta GlobalStateDelta { get; set; }

        /// <summary>
        /// The raw signed transaction.
        /// </summary>
        /// <value>The raw signed transaction.</value>
        [DataMember(Name="txn", EmitDefaultValue=false)]
        public Object Txn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006 {\n");
            sb.Append("  AssetIndex: ").Append(AssetIndex).Append("\n");
            sb.Append("  ApplicationIndex: ").Append(ApplicationIndex).Append("\n");
            sb.Append("  CloseRewards: ").Append(CloseRewards).Append("\n");
            sb.Append("  ClosingAmount: ").Append(ClosingAmount).Append("\n");
            sb.Append("  ConfirmedRound: ").Append(ConfirmedRound).Append("\n");
            sb.Append("  PoolError: ").Append(PoolError).Append("\n");
            sb.Append("  ReceiverRewards: ").Append(ReceiverRewards).Append("\n");
            sb.Append("  SenderRewards: ").Append(SenderRewards).Append("\n");
            sb.Append("  LocalStateDelta: ").Append(LocalStateDelta).Append("\n");
            sb.Append("  GlobalStateDelta: ").Append(GlobalStateDelta).Append("\n");
            sb.Append("  Txn: ").Append(Txn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006);
        }

        /// <summary>
        /// Returns true if InlineResponse2006 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssetIndex == input.AssetIndex ||
                    (this.AssetIndex != null &&
                    this.AssetIndex.Equals(input.AssetIndex))
                ) && 
                (
                    this.ApplicationIndex == input.ApplicationIndex ||
                    (this.ApplicationIndex != null &&
                    this.ApplicationIndex.Equals(input.ApplicationIndex))
                ) && 
                (
                    this.CloseRewards == input.CloseRewards ||
                    (this.CloseRewards != null &&
                    this.CloseRewards.Equals(input.CloseRewards))
                ) && 
                (
                    this.ClosingAmount == input.ClosingAmount ||
                    (this.ClosingAmount != null &&
                    this.ClosingAmount.Equals(input.ClosingAmount))
                ) && 
                (
                    this.ConfirmedRound == input.ConfirmedRound ||
                    (this.ConfirmedRound != null &&
                    this.ConfirmedRound.Equals(input.ConfirmedRound))
                ) && 
                (
                    this.PoolError == input.PoolError ||
                    (this.PoolError != null &&
                    this.PoolError.Equals(input.PoolError))
                ) && 
                (
                    this.ReceiverRewards == input.ReceiverRewards ||
                    (this.ReceiverRewards != null &&
                    this.ReceiverRewards.Equals(input.ReceiverRewards))
                ) && 
                (
                    this.SenderRewards == input.SenderRewards ||
                    (this.SenderRewards != null &&
                    this.SenderRewards.Equals(input.SenderRewards))
                ) && 
                (
                    this.LocalStateDelta == input.LocalStateDelta ||
                    this.LocalStateDelta != null &&
                    this.LocalStateDelta.SequenceEqual(input.LocalStateDelta)
                ) && 
                (
                    this.GlobalStateDelta == input.GlobalStateDelta ||
                    (this.GlobalStateDelta != null &&
                    this.GlobalStateDelta.Equals(input.GlobalStateDelta))
                ) && 
                (
                    this.Txn == input.Txn ||
                    (this.Txn != null &&
                    this.Txn.Equals(input.Txn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetIndex != null)
                    hashCode = hashCode * 59 + this.AssetIndex.GetHashCode();
                if (this.ApplicationIndex != null)
                    hashCode = hashCode * 59 + this.ApplicationIndex.GetHashCode();
                if (this.CloseRewards != null)
                    hashCode = hashCode * 59 + this.CloseRewards.GetHashCode();
                if (this.ClosingAmount != null)
                    hashCode = hashCode * 59 + this.ClosingAmount.GetHashCode();
                if (this.ConfirmedRound != null)
                    hashCode = hashCode * 59 + this.ConfirmedRound.GetHashCode();
                if (this.PoolError != null)
                    hashCode = hashCode * 59 + this.PoolError.GetHashCode();
                if (this.ReceiverRewards != null)
                    hashCode = hashCode * 59 + this.ReceiverRewards.GetHashCode();
                if (this.SenderRewards != null)
                    hashCode = hashCode * 59 + this.SenderRewards.GetHashCode();
                if (this.LocalStateDelta != null)
                    hashCode = hashCode * 59 + this.LocalStateDelta.GetHashCode();
                if (this.GlobalStateDelta != null)
                    hashCode = hashCode * 59 + this.GlobalStateDelta.GetHashCode();
                if (this.Txn != null)
                    hashCode = hashCode * 59 + this.Txn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
