/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Algod.Client.SwaggerDateConverter;

namespace Algorand.V2.Algod.Model
{
    /// <summary>
    /// Stores the TEAL eval step data
    /// </summary>
    [DataContract]
    public partial class DryrunState :  IEquatable<DryrunState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DryrunState" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DryrunState() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DryrunState" /> class.
        /// </summary>
        /// <param name="line">Line number (required).</param>
        /// <param name="pc">Program counter (required).</param>
        /// <param name="stack">stack (required).</param>
        /// <param name="scratch">scratch.</param>
        /// <param name="error">Evaluation error if any.</param>
        public DryrunState(long? line = default, long? pc = default, List<TealValue> stack = default(List<TealValue>), List<TealValue> scratch = default(List<TealValue>), string error = default(string))
        {
            // to ensure "line" is required (not null)
            if (line == null)
            {
                throw new InvalidDataException("line is a required property for DryrunState and cannot be null");
            }
            else
            {
                this.Line = line;
            }
            // to ensure "pc" is required (not null)
            if (pc == null)
            {
                throw new InvalidDataException("pc is a required property for DryrunState and cannot be null");
            }
            else
            {
                this.Pc = pc;
            }
            // to ensure "stack" is required (not null)
            if (stack == null)
            {
                throw new InvalidDataException("stack is a required property for DryrunState and cannot be null");
            }
            else
            {
                this.Stack = stack;
            }
            this.Scratch = scratch;
            this.Error = error;
        }
        
        /// <summary>
        /// Line number
        /// </summary>
        /// <value>Line number</value>
        [DataMember(Name="line", EmitDefaultValue=false)]
        public long? Line { get; set; }

        /// <summary>
        /// Program counter
        /// </summary>
        /// <value>Program counter</value>
        [DataMember(Name="pc", EmitDefaultValue=false)]
        public long? Pc { get; set; }

        /// <summary>
        /// Gets or Sets Stack
        /// </summary>
        [DataMember(Name="stack", EmitDefaultValue=false)]
        public List<TealValue> Stack { get; set; }

        /// <summary>
        /// Gets or Sets Scratch
        /// </summary>
        [DataMember(Name="scratch", EmitDefaultValue=false)]
        public List<TealValue> Scratch { get; set; }

        /// <summary>
        /// Evaluation error if any
        /// </summary>
        /// <value>Evaluation error if any</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DryrunState {\n");
            sb.Append("  Line: ").Append(Line).Append("\n");
            sb.Append("  Pc: ").Append(Pc).Append("\n");
            sb.Append("  Stack: ").Append(Stack).Append("\n");
            sb.Append("  Scratch: ").Append(Scratch).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DryrunState);
        }

        /// <summary>
        /// Returns true if DryrunState instances are equal
        /// </summary>
        /// <param name="input">Instance of DryrunState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DryrunState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Line == input.Line ||
                    (this.Line != null &&
                    this.Line.Equals(input.Line))
                ) && 
                (
                    this.Pc == input.Pc ||
                    (this.Pc != null &&
                    this.Pc.Equals(input.Pc))
                ) && 
                (
                    this.Stack == input.Stack ||
                    this.Stack != null &&
                    this.Stack.SequenceEqual(input.Stack)
                ) && 
                (
                    this.Scratch == input.Scratch ||
                    this.Scratch != null &&
                    this.Scratch.SequenceEqual(input.Scratch)
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Line != null)
                    hashCode = hashCode * 59 + this.Line.GetHashCode();
                if (this.Pc != null)
                    hashCode = hashCode * 59 + this.Pc.GetHashCode();
                if (this.Stack != null)
                    hashCode = hashCode * 59 + this.Stack.GetHashCode();
                if (this.Scratch != null)
                    hashCode = hashCode * 59 + this.Scratch.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
