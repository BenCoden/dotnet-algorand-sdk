/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Algorand.Client;
using Algorand.V2.Model;

namespace Algorand.V2.Algod
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrivateApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Aborts a catchpoint catchup.
        /// </summary>
        /// <remarks>
        /// Given a catchpoint, it aborts catching up to this catchpoint
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>CatchpointAbortResponse</returns>
        CatchpointAbortResponse AbortCatchup (string catchpoint);

        /// <summary>
        /// Aborts a catchpoint catchup.
        /// </summary>
        /// <remarks>
        /// Given a catchpoint, it aborts catching up to this catchpoint
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>ApiResponse of CatchpointAbortResponse</returns>
        ApiResponse<CatchpointAbortResponse> AbortCatchupWithHttpInfo (string catchpoint);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate (or renew) and register participation keys on the node for a given account address.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The &#x60;account-id&#x60; to update, or &#x60;all&#x60; to update all accounts.</param>
        /// <param name="fee">The fee to use when submitting key registration transactions. Defaults to the suggested fee. (optional, default to 1000)</param>
        /// <param name="keyDilution">value to use for two-level participation key. (optional)</param>
        /// <param name="roundLastValid">The last round for which the generated participation keys will be valid. (optional)</param>
        /// <param name="noWait">Don&#39;t wait for transaction to commit before returning response. (optional)</param>
        /// <returns>PostTransactionsResponse</returns>
        PostTransactionsResponse RegisterParticipationKeys (string address, long? fee = null, long? keyDilution = null, long? roundLastValid = null, bool? noWait = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate (or renew) and register participation keys on the node for a given account address.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The &#x60;account-id&#x60; to update, or &#x60;all&#x60; to update all accounts.</param>
        /// <param name="fee">The fee to use when submitting key registration transactions. Defaults to the suggested fee. (optional, default to 1000)</param>
        /// <param name="keyDilution">value to use for two-level participation key. (optional)</param>
        /// <param name="roundLastValid">The last round for which the generated participation keys will be valid. (optional)</param>
        /// <param name="noWait">Don&#39;t wait for transaction to commit before returning response. (optional)</param>
        /// <returns>ApiResponse of PostTransactionsResponse</returns>
        ApiResponse<PostTransactionsResponse> RegisterParticipationKeysWithHttpInfo (string address, long? fee = null, long? keyDilution = null, long? roundLastValid = null, bool? noWait = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout"> (optional, default to 0)</param>
        /// <returns>Object</returns>
        Object ShutdownNode (int? timeout = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ShutdownNodeWithHttpInfo (int? timeout = null);
        /// <summary>
        /// Starts a catchpoint catchup.
        /// </summary>
        /// <remarks>
        /// Given a catchpoint, it starts catching up to this catchpoint
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>CatchpointStartResponse</returns>
        CatchpointStartResponse StartCatchup (string catchpoint);

        /// <summary>
        /// Starts a catchpoint catchup.
        /// </summary>
        /// <remarks>
        /// Given a catchpoint, it starts catching up to this catchpoint
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>ApiResponse of CatchpointStartResponse</returns>
        ApiResponse<CatchpointStartResponse> StartCatchupWithHttpInfo (string catchpoint);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Aborts a catchpoint catchup.
        /// </summary>
        /// <remarks>
        /// Given a catchpoint, it aborts catching up to this catchpoint
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>Task of CatchpointAbortResponse</returns>
        System.Threading.Tasks.Task<CatchpointAbortResponse> AbortCatchupAsync (string catchpoint);

        /// <summary>
        /// Aborts a catchpoint catchup.
        /// </summary>
        /// <remarks>
        /// Given a catchpoint, it aborts catching up to this catchpoint
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>Task of ApiResponse (CatchpointAbortResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatchpointAbortResponse>> AbortCatchupAsyncWithHttpInfo (string catchpoint);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate (or renew) and register participation keys on the node for a given account address.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The &#x60;account-id&#x60; to update, or &#x60;all&#x60; to update all accounts.</param>
        /// <param name="fee">The fee to use when submitting key registration transactions. Defaults to the suggested fee. (optional, default to 1000)</param>
        /// <param name="keyDilution">value to use for two-level participation key. (optional)</param>
        /// <param name="roundLastValid">The last round for which the generated participation keys will be valid. (optional)</param>
        /// <param name="noWait">Don&#39;t wait for transaction to commit before returning response. (optional)</param>
        /// <returns>Task of PostTransactionsResponse</returns>
        System.Threading.Tasks.Task<PostTransactionsResponse> RegisterParticipationKeysAsync (string address, long? fee = null, long? keyDilution = null, long? roundLastValid = null, bool? noWait = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generate (or renew) and register participation keys on the node for a given account address.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The &#x60;account-id&#x60; to update, or &#x60;all&#x60; to update all accounts.</param>
        /// <param name="fee">The fee to use when submitting key registration transactions. Defaults to the suggested fee. (optional, default to 1000)</param>
        /// <param name="keyDilution">value to use for two-level participation key. (optional)</param>
        /// <param name="roundLastValid">The last round for which the generated participation keys will be valid. (optional)</param>
        /// <param name="noWait">Don&#39;t wait for transaction to commit before returning response. (optional)</param>
        /// <returns>Task of ApiResponse (PostTransactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostTransactionsResponse>> RegisterParticipationKeysAsyncWithHttpInfo (string address, long? fee = null, long? keyDilution = null, long? roundLastValid = null, bool? noWait = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout"> (optional, default to 0)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ShutdownNodeAsync (int? timeout = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShutdownNodeAsyncWithHttpInfo (int? timeout = null);
        /// <summary>
        /// Starts a catchpoint catchup.
        /// </summary>
        /// <remarks>
        /// Given a catchpoint, it starts catching up to this catchpoint
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>Task of CatchpointStartResponse</returns>
        System.Threading.Tasks.Task<CatchpointStartResponse> StartCatchupAsync (string catchpoint);

        /// <summary>
        /// Starts a catchpoint catchup.
        /// </summary>
        /// <remarks>
        /// Given a catchpoint, it starts catching up to this catchpoint
        /// </remarks>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>Task of ApiResponse (CatchpointStartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatchpointStartResponse>> StartCatchupAsyncWithHttpInfo (string catchpoint);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrivateApi : IPrivateApi
    {
        private Algorand.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrivateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrivateApi(String basePath)
        {
            this.Configuration = new Algorand.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrivateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrivateApi(Algorand.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Algorand.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Algorand.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Algorand.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Algorand.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Aborts a catchpoint catchup. Given a catchpoint, it aborts catching up to this catchpoint
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>CatchpointAbortResponse</returns>
        public CatchpointAbortResponse AbortCatchup (string catchpoint)
        {
             ApiResponse<CatchpointAbortResponse> localVarResponse = AbortCatchupWithHttpInfo(catchpoint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Aborts a catchpoint catchup. Given a catchpoint, it aborts catching up to this catchpoint
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>ApiResponse of CatchpointAbortResponse</returns>
        public ApiResponse< CatchpointAbortResponse > AbortCatchupWithHttpInfo (string catchpoint)
        {
            // verify the required parameter 'catchpoint' is set
            if (catchpoint == null)
                throw new ApiException(400, "Missing required parameter 'catchpoint' when calling PrivateApi->AbortCatchup");

            var localVarPath = "/v2/catchup/{catchpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catchpoint != null) localVarPathParams.Add("catchpoint", this.Configuration.ApiClient.ParameterToString(catchpoint)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AbortCatchup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatchpointAbortResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatchpointAbortResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatchpointAbortResponse)));
        }

        /// <summary>
        /// Aborts a catchpoint catchup. Given a catchpoint, it aborts catching up to this catchpoint
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>Task of CatchpointAbortResponse</returns>
        public async System.Threading.Tasks.Task<CatchpointAbortResponse> AbortCatchupAsync (string catchpoint)
        {
             ApiResponse<CatchpointAbortResponse> localVarResponse = await AbortCatchupAsyncWithHttpInfo(catchpoint);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Aborts a catchpoint catchup. Given a catchpoint, it aborts catching up to this catchpoint
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>Task of ApiResponse (CatchpointAbortResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatchpointAbortResponse>> AbortCatchupAsyncWithHttpInfo (string catchpoint)
        {
            // verify the required parameter 'catchpoint' is set
            if (catchpoint == null)
                throw new ApiException(400, "Missing required parameter 'catchpoint' when calling PrivateApi->AbortCatchup");

            var localVarPath = "/v2/catchup/{catchpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catchpoint != null) localVarPathParams.Add("catchpoint", this.Configuration.ApiClient.ParameterToString(catchpoint)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AbortCatchup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatchpointAbortResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatchpointAbortResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatchpointAbortResponse)));
        }

        /// <summary>
        ///  Generate (or renew) and register participation keys on the node for a given account address.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The &#x60;account-id&#x60; to update, or &#x60;all&#x60; to update all accounts.</param>
        /// <param name="fee">The fee to use when submitting key registration transactions. Defaults to the suggested fee. (optional, default to 1000)</param>
        /// <param name="keyDilution">value to use for two-level participation key. (optional)</param>
        /// <param name="roundLastValid">The last round for which the generated participation keys will be valid. (optional)</param>
        /// <param name="noWait">Don&#39;t wait for transaction to commit before returning response. (optional)</param>
        /// <returns>PostTransactionsResponse</returns>
        public PostTransactionsResponse RegisterParticipationKeys (string address, long? fee = null, long? keyDilution = null, long? roundLastValid = null, bool? noWait = null)
        {
             ApiResponse<PostTransactionsResponse> localVarResponse = RegisterParticipationKeysWithHttpInfo(address, fee, keyDilution, roundLastValid, noWait);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Generate (or renew) and register participation keys on the node for a given account address.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The &#x60;account-id&#x60; to update, or &#x60;all&#x60; to update all accounts.</param>
        /// <param name="fee">The fee to use when submitting key registration transactions. Defaults to the suggested fee. (optional, default to 1000)</param>
        /// <param name="keyDilution">value to use for two-level participation key. (optional)</param>
        /// <param name="roundLastValid">The last round for which the generated participation keys will be valid. (optional)</param>
        /// <param name="noWait">Don&#39;t wait for transaction to commit before returning response. (optional)</param>
        /// <returns>ApiResponse of PostTransactionsResponse</returns>
        public ApiResponse< PostTransactionsResponse > RegisterParticipationKeysWithHttpInfo (string address, long? fee = null, long? keyDilution = null, long? roundLastValid = null, bool? noWait = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling PrivateApi->RegisterParticipationKeys");

            var localVarPath = "/v2/register-participation-keys/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (fee != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fee", fee)); // query parameter
            if (keyDilution != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key-dilution", keyDilution)); // query parameter
            if (roundLastValid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "round-last-valid", roundLastValid)); // query parameter
            if (noWait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-wait", noWait)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterParticipationKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostTransactionsResponse)));
        }

        /// <summary>
        ///  Generate (or renew) and register participation keys on the node for a given account address.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The &#x60;account-id&#x60; to update, or &#x60;all&#x60; to update all accounts.</param>
        /// <param name="fee">The fee to use when submitting key registration transactions. Defaults to the suggested fee. (optional, default to 1000)</param>
        /// <param name="keyDilution">value to use for two-level participation key. (optional)</param>
        /// <param name="roundLastValid">The last round for which the generated participation keys will be valid. (optional)</param>
        /// <param name="noWait">Don&#39;t wait for transaction to commit before returning response. (optional)</param>
        /// <returns>Task of PostTransactionsResponse</returns>
        public async System.Threading.Tasks.Task<PostTransactionsResponse> RegisterParticipationKeysAsync (string address, long? fee = null, long? keyDilution = null, long? roundLastValid = null, bool? noWait = null)
        {
             ApiResponse<PostTransactionsResponse> localVarResponse = await RegisterParticipationKeysAsyncWithHttpInfo(address, fee, keyDilution, roundLastValid, noWait);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Generate (or renew) and register participation keys on the node for a given account address.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">The &#x60;account-id&#x60; to update, or &#x60;all&#x60; to update all accounts.</param>
        /// <param name="fee">The fee to use when submitting key registration transactions. Defaults to the suggested fee. (optional, default to 1000)</param>
        /// <param name="keyDilution">value to use for two-level participation key. (optional)</param>
        /// <param name="roundLastValid">The last round for which the generated participation keys will be valid. (optional)</param>
        /// <param name="noWait">Don&#39;t wait for transaction to commit before returning response. (optional)</param>
        /// <returns>Task of ApiResponse (PostTransactionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostTransactionsResponse>> RegisterParticipationKeysAsyncWithHttpInfo (string address, long? fee = null, long? keyDilution = null, long? roundLastValid = null, bool? noWait = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling PrivateApi->RegisterParticipationKeys");

            var localVarPath = "/v2/register-participation-keys/{address}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarPathParams.Add("address", this.Configuration.ApiClient.ParameterToString(address)); // path parameter
            if (fee != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fee", fee)); // query parameter
            if (keyDilution != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key-dilution", keyDilution)); // query parameter
            if (roundLastValid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "round-last-valid", roundLastValid)); // query parameter
            if (noWait != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "no-wait", noWait)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterParticipationKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostTransactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PostTransactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostTransactionsResponse)));
        }

        /// <summary>
        ///  Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout"> (optional, default to 0)</param>
        /// <returns>Object</returns>
        public Object ShutdownNode (int? timeout = null)
        {
             ApiResponse<Object> localVarResponse = ShutdownNodeWithHttpInfo(timeout);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ShutdownNodeWithHttpInfo (int? timeout = null)
        {

            var localVarPath = "/v2/shutdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeout", timeout)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShutdownNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout"> (optional, default to 0)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ShutdownNodeAsync (int? timeout = null)
        {
             ApiResponse<Object> localVarResponse = await ShutdownNodeAsyncWithHttpInfo(timeout);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeout"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ShutdownNodeAsyncWithHttpInfo (int? timeout = null)
        {

            var localVarPath = "/v2/shutdown";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeout != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timeout", timeout)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ShutdownNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Starts a catchpoint catchup. Given a catchpoint, it starts catching up to this catchpoint
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>CatchpointStartResponse</returns>
        public CatchpointStartResponse StartCatchup (string catchpoint)
        {
             ApiResponse<CatchpointStartResponse> localVarResponse = StartCatchupWithHttpInfo(catchpoint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a catchpoint catchup. Given a catchpoint, it starts catching up to this catchpoint
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>ApiResponse of CatchpointStartResponse</returns>
        public ApiResponse< CatchpointStartResponse > StartCatchupWithHttpInfo (string catchpoint)
        {
            // verify the required parameter 'catchpoint' is set
            if (catchpoint == null)
                throw new ApiException(400, "Missing required parameter 'catchpoint' when calling PrivateApi->StartCatchup");

            var localVarPath = "/v2/catchup/{catchpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catchpoint != null) localVarPathParams.Add("catchpoint", this.Configuration.ApiClient.ParameterToString(catchpoint)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartCatchup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatchpointStartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatchpointStartResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatchpointStartResponse)));
        }

        /// <summary>
        /// Starts a catchpoint catchup. Given a catchpoint, it starts catching up to this catchpoint
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>Task of CatchpointStartResponse</returns>
        public async System.Threading.Tasks.Task<CatchpointStartResponse> StartCatchupAsync (string catchpoint)
        {
             ApiResponse<CatchpointStartResponse> localVarResponse = await StartCatchupAsyncWithHttpInfo(catchpoint);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts a catchpoint catchup. Given a catchpoint, it starts catching up to this catchpoint
        /// </summary>
        /// <exception cref="Algorand.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catchpoint">A catch point</param>
        /// <returns>Task of ApiResponse (CatchpointStartResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatchpointStartResponse>> StartCatchupAsyncWithHttpInfo (string catchpoint)
        {
            // verify the required parameter 'catchpoint' is set
            if (catchpoint == null)
                throw new ApiException(400, "Missing required parameter 'catchpoint' when calling PrivateApi->StartCatchup");

            var localVarPath = "/v2/catchup/{catchpoint}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catchpoint != null) localVarPathParams.Add("catchpoint", this.Configuration.ApiClient.ParameterToString(catchpoint)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartCatchup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CatchpointStartResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatchpointStartResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatchpointStartResponse)));
        }

    }
}
