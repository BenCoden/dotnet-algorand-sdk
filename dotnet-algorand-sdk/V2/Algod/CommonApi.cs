/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Algorand.V2.Client;
using Algorand.V2.Model;
using Version = Algorand.V2.Model.Version;

namespace Algorand.V2.Algod
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommonApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the genesis information.
        /// </summary>
        /// <remarks>
        /// Returns the entire genesis file in json.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string GetGenesis ();

        /// <summary>
        /// Gets the genesis information.
        /// </summary>
        /// <remarks>
        /// Returns the entire genesis file in json.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetGenesisWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the supported API versions, binary build versions, and genesis information.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Version</returns>
        Version GetVersion ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the supported API versions, binary build versions, and genesis information.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Version</returns>
        ApiResponse<Version> GetVersionWithHttpInfo ();
        /// <summary>
        /// Returns OK if healthy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void HealthCheck ();

        /// <summary>
        /// Returns OK if healthy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HealthCheckWithHttpInfo ();
        /// <summary>
        /// Return metrics about algod functioning.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Metrics ();

        /// <summary>
        /// Return metrics about algod functioning.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MetricsWithHttpInfo ();
        /// <summary>
        /// Gets the current swagger spec.
        /// </summary>
        /// <remarks>
        /// Returns the entire swagger spec in json.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string SwaggerJSON ();

        /// <summary>
        /// Gets the current swagger spec.
        /// </summary>
        /// <remarks>
        /// Returns the entire swagger spec in json.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SwaggerJSONWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the genesis information.
        /// </summary>
        /// <remarks>
        /// Returns the entire genesis file in json.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetGenesisAsync ();

        /// <summary>
        /// Gets the genesis information.
        /// </summary>
        /// <remarks>
        /// Returns the entire genesis file in json.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetGenesisAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the supported API versions, binary build versions, and genesis information.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Version</returns>
        System.Threading.Tasks.Task<Version> GetVersionAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieves the supported API versions, binary build versions, and genesis information.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Version)</returns>
        System.Threading.Tasks.Task<ApiResponse<Version>> GetVersionAsyncWithHttpInfo ();
        /// <summary>
        /// Returns OK if healthy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HealthCheckAsync ();

        /// <summary>
        /// Returns OK if healthy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HealthCheckAsyncWithHttpInfo ();
        /// <summary>
        /// Return metrics about algod functioning.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MetricsAsync ();

        /// <summary>
        /// Return metrics about algod functioning.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MetricsAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the current swagger spec.
        /// </summary>
        /// <remarks>
        /// Returns the entire swagger spec in json.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SwaggerJSONAsync ();

        /// <summary>
        /// Gets the current swagger spec.
        /// </summary>
        /// <remarks>
        /// Returns the entire swagger spec in json.
        /// </remarks>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SwaggerJSONAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommonApi : ICommonApi
    {
        private Algorand.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommonApi(String basePath)
        {
            this.Configuration = new Algorand.V2.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Algorand.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommonApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommonApi(Algorand.V2.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Algorand.V2.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Algorand.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Algorand.V2.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Algorand.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the genesis information. Returns the entire genesis file in json.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string GetGenesis ()
        {
             ApiResponse<string> localVarResponse = GetGenesisWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the genesis information. Returns the entire genesis file in json.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetGenesisWithHttpInfo ()
        {

            var localVarPath = "/genesis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenesis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the genesis information. Returns the entire genesis file in json.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetGenesisAsync ()
        {
             ApiResponse<string> localVarResponse = await GetGenesisAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the genesis information. Returns the entire genesis file in json.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetGenesisAsyncWithHttpInfo ()
        {

            var localVarPath = "/genesis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenesis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieves the supported API versions, binary build versions, and genesis information.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Version</returns>
        public Version GetVersion ()
        {
             ApiResponse<Version> localVarResponse = GetVersionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieves the supported API versions, binary build versions, and genesis information.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Version</returns>
        public ApiResponse< Version > GetVersionWithHttpInfo ()
        {

            var localVarPath = "/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Version>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Version) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Version)));
        }

        /// <summary>
        ///  Retrieves the supported API versions, binary build versions, and genesis information.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Version</returns>
        public async System.Threading.Tasks.Task<Version> GetVersionAsync ()
        {
             ApiResponse<Version> localVarResponse = await GetVersionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieves the supported API versions, binary build versions, and genesis information.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Version)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Version>> GetVersionAsyncWithHttpInfo ()
        {

            var localVarPath = "/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Version>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Version) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Version)));
        }

        /// <summary>
        /// Returns OK if healthy. 
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void HealthCheck ()
        {
             HealthCheckWithHttpInfo();
        }

        /// <summary>
        /// Returns OK if healthy. 
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HealthCheckWithHttpInfo ()
        {

            var localVarPath = "/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns OK if healthy. 
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HealthCheckAsync ()
        {
             await HealthCheckAsyncWithHttpInfo();

        }

        /// <summary>
        /// Returns OK if healthy. 
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HealthCheckAsyncWithHttpInfo ()
        {

            var localVarPath = "/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Return metrics about algod functioning. 
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Metrics ()
        {
             MetricsWithHttpInfo();
        }

        /// <summary>
        /// Return metrics about algod functioning. 
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MetricsWithHttpInfo ()
        {

            var localVarPath = "/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Metrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Return metrics about algod functioning. 
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MetricsAsync ()
        {
             await MetricsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Return metrics about algod functioning. 
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MetricsAsyncWithHttpInfo ()
        {

            var localVarPath = "/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Metrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the current swagger spec. Returns the entire swagger spec in json.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string SwaggerJSON ()
        {
             ApiResponse<string> localVarResponse = SwaggerJSONWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current swagger spec. Returns the entire swagger spec in json.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SwaggerJSONWithHttpInfo ()
        {

            var localVarPath = "/swagger.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwaggerJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Gets the current swagger spec. Returns the entire swagger spec in json.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SwaggerJSONAsync ()
        {
             ApiResponse<string> localVarResponse = await SwaggerJSONAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current swagger spec. Returns the entire swagger spec in json.
        /// </summary>
        /// <exception cref="Algorand.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SwaggerJSONAsyncWithHttpInfo ()
        {

            var localVarPath = "/swagger.json";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token")))
            {
                localVarHeaderParams["X-Algo-API-Token"] = this.Configuration.GetApiKeyWithPrefix("X-Algo-API-Token");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwaggerJSON", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
