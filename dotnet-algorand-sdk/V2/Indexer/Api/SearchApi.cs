/* 
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Algorand.V2.Indexer.Client;
using Algorand.V2.Indexer.Model;

namespace Algorand.V2.Indexer.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for accounts.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="authAddr">Include accounts configured to use this spending key. (optional)</param>
        /// <param name="round">Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 SearchForAccounts (int? assetId = null, int? limit = null, string next = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string authAddr = null, int? round = null, int? applicationId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for accounts.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="authAddr">Include accounts configured to use this spending key. (optional)</param>
        /// <param name="round">Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> SearchForAccountsWithHttpInfo (int? assetId = null, int? limit = null, string next = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string authAddr = null, int? round = null, int? applicationId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for applications
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 SearchForApplications (int? applicationId = null, int? limit = null, string next = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for applications
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> SearchForApplicationsWithHttpInfo (int? applicationId = null, int? limit = null, string next = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for assets.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="creator">Filter just assets with the given creator address. (optional)</param>
        /// <param name="name">Filter just assets with the given name. (optional)</param>
        /// <param name="unit">Filter just assets with the given unit. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 SearchForAssets (int? limit = null, string next = null, string creator = null, string name = null, string unit = null, int? assetId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for assets.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="creator">Filter just assets with the given creator address. (optional)</param>
        /// <param name="name">Filter just assets with the given name. (optional)</param>
        /// <param name="unit">Filter just assets with the given unit. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> SearchForAssetsWithHttpInfo (int? limit = null, string next = null, string creator = null, string name = null, string unit = null, int? assetId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for transactions.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="notePrefix">Specifies a prefix which must be contained in the note field. (optional)</param>
        /// <param name="txType"> (optional)</param>
        /// <param name="sigType">SigType filters just results using the specified type of signature: * sig - Standard * msig - MultiSig * lsig - LogicSig (optional)</param>
        /// <param name="txid">Lookup the specific transaction by ID. (optional)</param>
        /// <param name="round">Include results for the specified round. (optional)</param>
        /// <param name="minRound">Include results at or after the specified min-round. (optional)</param>
        /// <param name="maxRound">Include results at or before the specified max-round. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="beforeTime">Include results before the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="afterTime">Include results after the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields. (optional)</param>
        /// <param name="addressRole">Combine with the address parameter to define what type of address to search for. (optional)</param>
        /// <param name="excludeCloseTo">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true. (optional)</param>
        /// <param name="rekeyTo">Include results which include the rekey-to field. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 SearchForTransactions (int? limit = null, string next = null, string notePrefix = null, string txType = null, string sigType = null, string txid = null, int? round = null, int? minRound = null, int? maxRound = null, int? assetId = null, DateTime? beforeTime = null, DateTime? afterTime = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string address = null, string addressRole = null, bool? excludeCloseTo = null, bool? rekeyTo = null, int? applicationId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for transactions.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="notePrefix">Specifies a prefix which must be contained in the note field. (optional)</param>
        /// <param name="txType"> (optional)</param>
        /// <param name="sigType">SigType filters just results using the specified type of signature: * sig - Standard * msig - MultiSig * lsig - LogicSig (optional)</param>
        /// <param name="txid">Lookup the specific transaction by ID. (optional)</param>
        /// <param name="round">Include results for the specified round. (optional)</param>
        /// <param name="minRound">Include results at or after the specified min-round. (optional)</param>
        /// <param name="maxRound">Include results at or before the specified max-round. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="beforeTime">Include results before the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="afterTime">Include results after the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields. (optional)</param>
        /// <param name="addressRole">Combine with the address parameter to define what type of address to search for. (optional)</param>
        /// <param name="excludeCloseTo">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true. (optional)</param>
        /// <param name="rekeyTo">Include results which include the rekey-to field. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> SearchForTransactionsWithHttpInfo (int? limit = null, string next = null, string notePrefix = null, string txType = null, string sigType = null, string txid = null, int? round = null, int? minRound = null, int? maxRound = null, int? assetId = null, DateTime? beforeTime = null, DateTime? afterTime = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string address = null, string addressRole = null, bool? excludeCloseTo = null, bool? rekeyTo = null, int? applicationId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for accounts.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="authAddr">Include accounts configured to use this spending key. (optional)</param>
        /// <param name="round">Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> SearchForAccountsAsync (int? assetId = null, int? limit = null, string next = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string authAddr = null, int? round = null, int? applicationId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for accounts.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="authAddr">Include accounts configured to use this spending key. (optional)</param>
        /// <param name="round">Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> SearchForAccountsAsyncWithHttpInfo (int? assetId = null, int? limit = null, string next = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string authAddr = null, int? round = null, int? applicationId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for applications
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> SearchForApplicationsAsync (int? applicationId = null, int? limit = null, string next = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for applications
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> SearchForApplicationsAsyncWithHttpInfo (int? applicationId = null, int? limit = null, string next = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for assets.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="creator">Filter just assets with the given creator address. (optional)</param>
        /// <param name="name">Filter just assets with the given name. (optional)</param>
        /// <param name="unit">Filter just assets with the given unit. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> SearchForAssetsAsync (int? limit = null, string next = null, string creator = null, string name = null, string unit = null, int? assetId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for assets.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="creator">Filter just assets with the given creator address. (optional)</param>
        /// <param name="name">Filter just assets with the given name. (optional)</param>
        /// <param name="unit">Filter just assets with the given unit. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchForAssetsAsyncWithHttpInfo (int? limit = null, string next = null, string creator = null, string name = null, string unit = null, int? assetId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for transactions.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="notePrefix">Specifies a prefix which must be contained in the note field. (optional)</param>
        /// <param name="txType"> (optional)</param>
        /// <param name="sigType">SigType filters just results using the specified type of signature: * sig - Standard * msig - MultiSig * lsig - LogicSig (optional)</param>
        /// <param name="txid">Lookup the specific transaction by ID. (optional)</param>
        /// <param name="round">Include results for the specified round. (optional)</param>
        /// <param name="minRound">Include results at or after the specified min-round. (optional)</param>
        /// <param name="maxRound">Include results at or before the specified max-round. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="beforeTime">Include results before the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="afterTime">Include results after the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields. (optional)</param>
        /// <param name="addressRole">Combine with the address parameter to define what type of address to search for. (optional)</param>
        /// <param name="excludeCloseTo">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true. (optional)</param>
        /// <param name="rekeyTo">Include results which include the rekey-to field. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> SearchForTransactionsAsync (int? limit = null, string next = null, string notePrefix = null, string txType = null, string sigType = null, string txid = null, int? round = null, int? minRound = null, int? maxRound = null, int? assetId = null, DateTime? beforeTime = null, DateTime? afterTime = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string address = null, string addressRole = null, bool? excludeCloseTo = null, bool? rekeyTo = null, int? applicationId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for transactions.
        /// </remarks>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="notePrefix">Specifies a prefix which must be contained in the note field. (optional)</param>
        /// <param name="txType"> (optional)</param>
        /// <param name="sigType">SigType filters just results using the specified type of signature: * sig - Standard * msig - MultiSig * lsig - LogicSig (optional)</param>
        /// <param name="txid">Lookup the specific transaction by ID. (optional)</param>
        /// <param name="round">Include results for the specified round. (optional)</param>
        /// <param name="minRound">Include results at or after the specified min-round. (optional)</param>
        /// <param name="maxRound">Include results at or before the specified max-round. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="beforeTime">Include results before the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="afterTime">Include results after the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields. (optional)</param>
        /// <param name="addressRole">Combine with the address parameter to define what type of address to search for. (optional)</param>
        /// <param name="excludeCloseTo">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true. (optional)</param>
        /// <param name="rekeyTo">Include results which include the rekey-to field. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> SearchForTransactionsAsyncWithHttpInfo (int? limit = null, string next = null, string notePrefix = null, string txType = null, string sigType = null, string txid = null, int? round = null, int? minRound = null, int? maxRound = null, int? assetId = null, DateTime? beforeTime = null, DateTime? afterTime = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string address = null, string addressRole = null, bool? excludeCloseTo = null, bool? rekeyTo = null, int? applicationId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SearchApi : ISearchApi
    {
        private Algorand.V2.Indexer.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new Algorand.V2.Indexer.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Algorand.V2.Indexer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// </summary>
        /// <returns></returns>
        public SearchApi()
        {
            this.Configuration = Algorand.V2.Indexer.Client.Configuration.Default;

            ExceptionFactory = Algorand.V2.Indexer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(Algorand.V2.Indexer.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Algorand.V2.Indexer.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Algorand.V2.Indexer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Algorand.V2.Indexer.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Algorand.V2.Indexer.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Search for accounts.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="authAddr">Include accounts configured to use this spending key. (optional)</param>
        /// <param name="round">Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 SearchForAccounts (int? assetId = null, int? limit = null, string next = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string authAddr = null, int? round = null, int? applicationId = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = SearchForAccountsWithHttpInfo(assetId, limit, next, currencyGreaterThan, currencyLessThan, authAddr, round, applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for accounts.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="authAddr">Include accounts configured to use this spending key. (optional)</param>
        /// <param name="round">Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > SearchForAccountsWithHttpInfo (int? assetId = null, int? limit = null, string next = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string authAddr = null, int? round = null, int? applicationId = null)
        {

            var localVarPath = "/v2/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset-id", assetId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (currencyGreaterThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency-greater-than", currencyGreaterThan)); // query parameter
            if (currencyLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency-less-than", currencyLessThan)); // query parameter
            if (authAddr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth-addr", authAddr)); // query parameter
            if (round != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "round", round)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application-id", applicationId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchForAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        ///  Search for accounts.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="authAddr">Include accounts configured to use this spending key. (optional)</param>
        /// <param name="round">Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> SearchForAccountsAsync (int? assetId = null, int? limit = null, string next = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string authAddr = null, int? round = null, int? applicationId = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await SearchForAccountsAsyncWithHttpInfo(assetId, limit, next, currencyGreaterThan, currencyLessThan, authAddr, round, applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for accounts.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="authAddr">Include accounts configured to use this spending key. (optional)</param>
        /// <param name="round">Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> SearchForAccountsAsyncWithHttpInfo (int? assetId = null, int? limit = null, string next = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string authAddr = null, int? round = null, int? applicationId = null)
        {

            var localVarPath = "/v2/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset-id", assetId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (currencyGreaterThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency-greater-than", currencyGreaterThan)); // query parameter
            if (currencyLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency-less-than", currencyLessThan)); // query parameter
            if (authAddr != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth-addr", authAddr)); // query parameter
            if (round != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "round", round)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application-id", applicationId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchForAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        ///  Search for applications
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 SearchForApplications (int? applicationId = null, int? limit = null, string next = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = SearchForApplicationsWithHttpInfo(applicationId, limit, next);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for applications
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > SearchForApplicationsWithHttpInfo (int? applicationId = null, int? limit = null, string next = null)
        {

            var localVarPath = "/v2/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application-id", applicationId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchForApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        ///  Search for applications
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> SearchForApplicationsAsync (int? applicationId = null, int? limit = null, string next = null)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await SearchForApplicationsAsyncWithHttpInfo(applicationId, limit, next);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for applications
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> SearchForApplicationsAsyncWithHttpInfo (int? applicationId = null, int? limit = null, string next = null)
        {

            var localVarPath = "/v2/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application-id", applicationId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchForApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        ///  Search for assets.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="creator">Filter just assets with the given creator address. (optional)</param>
        /// <param name="name">Filter just assets with the given name. (optional)</param>
        /// <param name="unit">Filter just assets with the given unit. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 SearchForAssets (int? limit = null, string next = null, string creator = null, string name = null, string unit = null, int? assetId = null)
        {
             ApiResponse<InlineResponse2005> localVarResponse = SearchForAssetsWithHttpInfo(limit, next, creator, name, unit, assetId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for assets.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="creator">Filter just assets with the given creator address. (optional)</param>
        /// <param name="name">Filter just assets with the given name. (optional)</param>
        /// <param name="unit">Filter just assets with the given unit. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse< InlineResponse2005 > SearchForAssetsWithHttpInfo (int? limit = null, string next = null, string creator = null, string name = null, string unit = null, int? assetId = null)
        {

            var localVarPath = "/v2/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (creator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creator", creator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (unit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unit", unit)); // query parameter
            if (assetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset-id", assetId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchForAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        ///  Search for assets.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="creator">Filter just assets with the given creator address. (optional)</param>
        /// <param name="name">Filter just assets with the given name. (optional)</param>
        /// <param name="unit">Filter just assets with the given unit. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> SearchForAssetsAsync (int? limit = null, string next = null, string creator = null, string name = null, string unit = null, int? assetId = null)
        {
             ApiResponse<InlineResponse2005> localVarResponse = await SearchForAssetsAsyncWithHttpInfo(limit, next, creator, name, unit, assetId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for assets.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="creator">Filter just assets with the given creator address. (optional)</param>
        /// <param name="name">Filter just assets with the given name. (optional)</param>
        /// <param name="unit">Filter just assets with the given unit. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchForAssetsAsyncWithHttpInfo (int? limit = null, string next = null, string creator = null, string name = null, string unit = null, int? assetId = null)
        {

            var localVarPath = "/v2/assets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (creator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "creator", creator)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (unit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unit", unit)); // query parameter
            if (assetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset-id", assetId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchForAssets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        ///  Search for transactions.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="notePrefix">Specifies a prefix which must be contained in the note field. (optional)</param>
        /// <param name="txType"> (optional)</param>
        /// <param name="sigType">SigType filters just results using the specified type of signature: * sig - Standard * msig - MultiSig * lsig - LogicSig (optional)</param>
        /// <param name="txid">Lookup the specific transaction by ID. (optional)</param>
        /// <param name="round">Include results for the specified round. (optional)</param>
        /// <param name="minRound">Include results at or after the specified min-round. (optional)</param>
        /// <param name="maxRound">Include results at or before the specified max-round. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="beforeTime">Include results before the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="afterTime">Include results after the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields. (optional)</param>
        /// <param name="addressRole">Combine with the address parameter to define what type of address to search for. (optional)</param>
        /// <param name="excludeCloseTo">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true. (optional)</param>
        /// <param name="rekeyTo">Include results which include the rekey-to field. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 SearchForTransactions (int? limit = null, string next = null, string notePrefix = null, string txType = null, string sigType = null, string txid = null, int? round = null, int? minRound = null, int? maxRound = null, int? assetId = null, DateTime? beforeTime = null, DateTime? afterTime = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string address = null, string addressRole = null, bool? excludeCloseTo = null, bool? rekeyTo = null, int? applicationId = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = SearchForTransactionsWithHttpInfo(limit, next, notePrefix, txType, sigType, txid, round, minRound, maxRound, assetId, beforeTime, afterTime, currencyGreaterThan, currencyLessThan, address, addressRole, excludeCloseTo, rekeyTo, applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for transactions.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="notePrefix">Specifies a prefix which must be contained in the note field. (optional)</param>
        /// <param name="txType"> (optional)</param>
        /// <param name="sigType">SigType filters just results using the specified type of signature: * sig - Standard * msig - MultiSig * lsig - LogicSig (optional)</param>
        /// <param name="txid">Lookup the specific transaction by ID. (optional)</param>
        /// <param name="round">Include results for the specified round. (optional)</param>
        /// <param name="minRound">Include results at or after the specified min-round. (optional)</param>
        /// <param name="maxRound">Include results at or before the specified max-round. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="beforeTime">Include results before the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="afterTime">Include results after the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields. (optional)</param>
        /// <param name="addressRole">Combine with the address parameter to define what type of address to search for. (optional)</param>
        /// <param name="excludeCloseTo">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true. (optional)</param>
        /// <param name="rekeyTo">Include results which include the rekey-to field. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > SearchForTransactionsWithHttpInfo (int? limit = null, string next = null, string notePrefix = null, string txType = null, string sigType = null, string txid = null, int? round = null, int? minRound = null, int? maxRound = null, int? assetId = null, DateTime? beforeTime = null, DateTime? afterTime = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string address = null, string addressRole = null, bool? excludeCloseTo = null, bool? rekeyTo = null, int? applicationId = null)
        {

            var localVarPath = "/v2/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (notePrefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "note-prefix", notePrefix)); // query parameter
            if (txType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tx-type", txType)); // query parameter
            if (sigType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sig-type", sigType)); // query parameter
            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (round != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "round", round)); // query parameter
            if (minRound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min-round", minRound)); // query parameter
            if (maxRound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max-round", maxRound)); // query parameter
            if (assetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset-id", assetId)); // query parameter
            if (beforeTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before-time", beforeTime)); // query parameter
            if (afterTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after-time", afterTime)); // query parameter
            if (currencyGreaterThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency-greater-than", currencyGreaterThan)); // query parameter
            if (currencyLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency-less-than", currencyLessThan)); // query parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (addressRole != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address-role", addressRole)); // query parameter
            if (excludeCloseTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude-close-to", excludeCloseTo)); // query parameter
            if (rekeyTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rekey-to", rekeyTo)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application-id", applicationId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchForTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        ///  Search for transactions.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="notePrefix">Specifies a prefix which must be contained in the note field. (optional)</param>
        /// <param name="txType"> (optional)</param>
        /// <param name="sigType">SigType filters just results using the specified type of signature: * sig - Standard * msig - MultiSig * lsig - LogicSig (optional)</param>
        /// <param name="txid">Lookup the specific transaction by ID. (optional)</param>
        /// <param name="round">Include results for the specified round. (optional)</param>
        /// <param name="minRound">Include results at or after the specified min-round. (optional)</param>
        /// <param name="maxRound">Include results at or before the specified max-round. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="beforeTime">Include results before the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="afterTime">Include results after the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields. (optional)</param>
        /// <param name="addressRole">Combine with the address parameter to define what type of address to search for. (optional)</param>
        /// <param name="excludeCloseTo">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true. (optional)</param>
        /// <param name="rekeyTo">Include results which include the rekey-to field. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> SearchForTransactionsAsync (int? limit = null, string next = null, string notePrefix = null, string txType = null, string sigType = null, string txid = null, int? round = null, int? minRound = null, int? maxRound = null, int? assetId = null, DateTime? beforeTime = null, DateTime? afterTime = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string address = null, string addressRole = null, bool? excludeCloseTo = null, bool? rekeyTo = null, int? applicationId = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await SearchForTransactionsAsyncWithHttpInfo(limit, next, notePrefix, txType, sigType, txid, round, minRound, maxRound, assetId, beforeTime, afterTime, currencyGreaterThan, currencyLessThan, address, addressRole, excludeCloseTo, rekeyTo, applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for transactions.
        /// </summary>
        /// <exception cref="Algorand.V2.Indexer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Maximum number of results to return. (optional)</param>
        /// <param name="next">The next page of results. Use the next token provided by the previous results. (optional)</param>
        /// <param name="notePrefix">Specifies a prefix which must be contained in the note field. (optional)</param>
        /// <param name="txType"> (optional)</param>
        /// <param name="sigType">SigType filters just results using the specified type of signature: * sig - Standard * msig - MultiSig * lsig - LogicSig (optional)</param>
        /// <param name="txid">Lookup the specific transaction by ID. (optional)</param>
        /// <param name="round">Include results for the specified round. (optional)</param>
        /// <param name="minRound">Include results at or after the specified min-round. (optional)</param>
        /// <param name="maxRound">Include results at or before the specified max-round. (optional)</param>
        /// <param name="assetId">Asset ID (optional)</param>
        /// <param name="beforeTime">Include results before the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="afterTime">Include results after the given time. Must be an RFC 3339 formatted string. (optional)</param>
        /// <param name="currencyGreaterThan">Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="currencyLessThan">Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used. (optional)</param>
        /// <param name="address">Only include transactions with this address in one of the transaction fields. (optional)</param>
        /// <param name="addressRole">Combine with the address parameter to define what type of address to search for. (optional)</param>
        /// <param name="excludeCloseTo">Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true. (optional)</param>
        /// <param name="rekeyTo">Include results which include the rekey-to field. (optional)</param>
        /// <param name="applicationId">Application ID (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> SearchForTransactionsAsyncWithHttpInfo (int? limit = null, string next = null, string notePrefix = null, string txType = null, string sigType = null, string txid = null, int? round = null, int? minRound = null, int? maxRound = null, int? assetId = null, DateTime? beforeTime = null, DateTime? afterTime = null, int? currencyGreaterThan = null, int? currencyLessThan = null, string address = null, string addressRole = null, bool? excludeCloseTo = null, bool? rekeyTo = null, int? applicationId = null)
        {

            var localVarPath = "/v2/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (notePrefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "note-prefix", notePrefix)); // query parameter
            if (txType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tx-type", txType)); // query parameter
            if (sigType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sig-type", sigType)); // query parameter
            if (txid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            if (round != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "round", round)); // query parameter
            if (minRound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min-round", minRound)); // query parameter
            if (maxRound != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max-round", maxRound)); // query parameter
            if (assetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asset-id", assetId)); // query parameter
            if (beforeTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before-time", beforeTime)); // query parameter
            if (afterTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after-time", afterTime)); // query parameter
            if (currencyGreaterThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency-greater-than", currencyGreaterThan)); // query parameter
            if (currencyLessThan != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency-less-than", currencyLessThan)); // query parameter
            if (address != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter
            if (addressRole != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address-role", addressRole)); // query parameter
            if (excludeCloseTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude-close-to", excludeCloseTo)); // query parameter
            if (rekeyTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rekey-to", rekeyTo)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application-id", applicationId)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchForTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

    }
}
