/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Indexer.Client.SwaggerDateConverter;

namespace Algorand.V2.Indexer.Model
{
    /// <summary>
    /// Stores the global information associated with an application.
    /// </summary>
    [DataContract]
    public partial class ApplicationParams :  IEquatable<ApplicationParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationParams" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationParams() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationParams" /> class.
        /// </summary>
        /// <param name="creator">The address that created this application. This is the address where the parameters and global state for this application can be found. (required).</param>
        /// <param name="approvalProgram">\\[approv\\] approval program. (required).</param>
        /// <param name="clearStateProgram">\\[clearp\\] approval program. (required).</param>
        /// <param name="localStateSchema">[\\lsch\\] local schema.</param>
        /// <param name="globalStateSchema">[\\lsch\\] global schema.</param>
        /// <param name="globalState">[\\gs\\] global schema.</param>
        public ApplicationParams(string creator = default(string), byte[] approvalProgram = default(byte[]), byte[] clearStateProgram = default(byte[]), ApplicationStateSchema localStateSchema = default(ApplicationStateSchema), ApplicationStateSchema globalStateSchema = default(ApplicationStateSchema), TealKeyValueStore globalState = default(TealKeyValueStore))
        {
            // to ensure "creator" is required (not null)
            if (creator == null)
            {
                throw new InvalidDataException("creator is a required property for ApplicationParams and cannot be null");
            }
            else
            {
                this.Creator = creator;
            }
            // to ensure "approvalProgram" is required (not null)
            if (approvalProgram == null)
            {
                throw new InvalidDataException("approvalProgram is a required property for ApplicationParams and cannot be null");
            }
            else
            {
                this.ApprovalProgram = approvalProgram;
            }
            // to ensure "clearStateProgram" is required (not null)
            if (clearStateProgram == null)
            {
                throw new InvalidDataException("clearStateProgram is a required property for ApplicationParams and cannot be null");
            }
            else
            {
                this.ClearStateProgram = clearStateProgram;
            }
            this.LocalStateSchema = localStateSchema;
            this.GlobalStateSchema = globalStateSchema;
            this.GlobalState = globalState;
        }
        
        /// <summary>
        /// The address that created this application. This is the address where the parameters and global state for this application can be found.
        /// </summary>
        /// <value>The address that created this application. This is the address where the parameters and global state for this application can be found.</value>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public string Creator { get; set; }

        /// <summary>
        /// \\[approv\\] approval program.
        /// </summary>
        /// <value>\\[approv\\] approval program.</value>
        [DataMember(Name="approval-program", EmitDefaultValue=false)]
        public byte[] ApprovalProgram { get; set; }

        /// <summary>
        /// \\[clearp\\] approval program.
        /// </summary>
        /// <value>\\[clearp\\] approval program.</value>
        [DataMember(Name="clear-state-program", EmitDefaultValue=false)]
        public byte[] ClearStateProgram { get; set; }

        /// <summary>
        /// [\\lsch\\] local schema
        /// </summary>
        /// <value>[\\lsch\\] local schema</value>
        [DataMember(Name="local-state-schema", EmitDefaultValue=false)]
        public ApplicationStateSchema LocalStateSchema { get; set; }

        /// <summary>
        /// [\\lsch\\] global schema
        /// </summary>
        /// <value>[\\lsch\\] global schema</value>
        [DataMember(Name="global-state-schema", EmitDefaultValue=false)]
        public ApplicationStateSchema GlobalStateSchema { get; set; }

        /// <summary>
        /// [\\gs\\] global schema
        /// </summary>
        /// <value>[\\gs\\] global schema</value>
        [DataMember(Name="global-state", EmitDefaultValue=false)]
        public TealKeyValueStore GlobalState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationParams {\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  ApprovalProgram: ").Append(ApprovalProgram).Append("\n");
            sb.Append("  ClearStateProgram: ").Append(ClearStateProgram).Append("\n");
            sb.Append("  LocalStateSchema: ").Append(LocalStateSchema).Append("\n");
            sb.Append("  GlobalStateSchema: ").Append(GlobalStateSchema).Append("\n");
            sb.Append("  GlobalState: ").Append(GlobalState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationParams);
        }

        /// <summary>
        /// Returns true if ApplicationParams instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.ApprovalProgram == input.ApprovalProgram ||
                    (this.ApprovalProgram != null &&
                    this.ApprovalProgram.Equals(input.ApprovalProgram))
                ) && 
                (
                    this.ClearStateProgram == input.ClearStateProgram ||
                    (this.ClearStateProgram != null &&
                    this.ClearStateProgram.Equals(input.ClearStateProgram))
                ) && 
                (
                    this.LocalStateSchema == input.LocalStateSchema ||
                    (this.LocalStateSchema != null &&
                    this.LocalStateSchema.Equals(input.LocalStateSchema))
                ) && 
                (
                    this.GlobalStateSchema == input.GlobalStateSchema ||
                    (this.GlobalStateSchema != null &&
                    this.GlobalStateSchema.Equals(input.GlobalStateSchema))
                ) && 
                (
                    this.GlobalState == input.GlobalState ||
                    (this.GlobalState != null &&
                    this.GlobalState.Equals(input.GlobalState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.ApprovalProgram != null)
                    hashCode = hashCode * 59 + this.ApprovalProgram.GetHashCode();
                if (this.ClearStateProgram != null)
                    hashCode = hashCode * 59 + this.ClearStateProgram.GetHashCode();
                if (this.LocalStateSchema != null)
                    hashCode = hashCode * 59 + this.LocalStateSchema.GetHashCode();
                if (this.GlobalStateSchema != null)
                    hashCode = hashCode * 59 + this.GlobalStateSchema.GetHashCode();
                if (this.GlobalState != null)
                    hashCode = hashCode * 59 + this.GlobalState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
