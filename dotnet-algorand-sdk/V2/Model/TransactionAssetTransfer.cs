/* 
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// Fields for an asset transfer transaction.  Definition: data/transactions/asset.go : AssetTransferTxnFields
    /// </summary>
    [DataContract]
        public partial class TransactionAssetTransfer :  IEquatable<TransactionAssetTransfer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionAssetTransfer" /> class.
        /// </summary>
        /// <param name="amount">\\[aamt\\] Amount of asset to transfer. A zero amount transferred to self allocates that asset in the account&#x27;s Assets map. (required).</param>
        /// <param name="assetId">\\[xaid\\] ID of the asset being transferred. (required).</param>
        /// <param name="closeAmount">Number of assets transfered to the close-to account as part of the transaction..</param>
        /// <param name="closeTo">\\[aclose\\] Indicates that the asset should be removed from the account&#x27;s Assets map, and specifies where the remaining asset holdings should be transferred.  It&#x27;s always valid to transfer remaining asset holdings to the creator account..</param>
        /// <param name="receiver">\\[arcv\\] Recipient address of the transfer. (required).</param>
        /// <param name="sender">\\[asnd\\] The effective sender during a clawback transactions. If this is not a zero value, the real transaction sender must be the Clawback address from the AssetParams..</param>
        public TransactionAssetTransfer(long? amount = default, long? assetId = default, long? closeAmount = default, string closeTo = default(string), string receiver = default(string), string sender = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for TransactionAssetTransfer and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "assetId" is required (not null)
            if (assetId == null)
            {
                throw new InvalidDataException("assetId is a required property for TransactionAssetTransfer and cannot be null");
            }
            else
            {
                this.AssetId = assetId;
            }
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new InvalidDataException("receiver is a required property for TransactionAssetTransfer and cannot be null");
            }
            else
            {
                this.Receiver = receiver;
            }
            this.CloseAmount = closeAmount;
            this.CloseTo = closeTo;
            this.Sender = sender;
        }
        
        /// <summary>
        /// \\[aamt\\] Amount of asset to transfer. A zero amount transferred to self allocates that asset in the account&#x27;s Assets map.
        /// </summary>
        /// <value>\\[aamt\\] Amount of asset to transfer. A zero amount transferred to self allocates that asset in the account&#x27;s Assets map.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// \\[xaid\\] ID of the asset being transferred.
        /// </summary>
        /// <value>\\[xaid\\] ID of the asset being transferred.</value>
        [DataMember(Name="asset-id", EmitDefaultValue=false)]
        public long? AssetId { get; set; }

        /// <summary>
        /// Number of assets transfered to the close-to account as part of the transaction.
        /// </summary>
        /// <value>Number of assets transfered to the close-to account as part of the transaction.</value>
        [DataMember(Name="close-amount", EmitDefaultValue=false)]
        public long? CloseAmount { get; set; }

        /// <summary>
        /// \\[aclose\\] Indicates that the asset should be removed from the account&#x27;s Assets map, and specifies where the remaining asset holdings should be transferred.  It&#x27;s always valid to transfer remaining asset holdings to the creator account.
        /// </summary>
        /// <value>\\[aclose\\] Indicates that the asset should be removed from the account&#x27;s Assets map, and specifies where the remaining asset holdings should be transferred.  It&#x27;s always valid to transfer remaining asset holdings to the creator account.</value>
        [DataMember(Name="close-to", EmitDefaultValue=false)]
        public string CloseTo { get; set; }

        /// <summary>
        /// \\[arcv\\] Recipient address of the transfer.
        /// </summary>
        /// <value>\\[arcv\\] Recipient address of the transfer.</value>
        [DataMember(Name="receiver", EmitDefaultValue=false)]
        public string Receiver { get; set; }

        /// <summary>
        /// \\[asnd\\] The effective sender during a clawback transactions. If this is not a zero value, the real transaction sender must be the Clawback address from the AssetParams.
        /// </summary>
        /// <value>\\[asnd\\] The effective sender during a clawback transactions. If this is not a zero value, the real transaction sender must be the Clawback address from the AssetParams.</value>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public string Sender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionAssetTransfer {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  CloseAmount: ").Append(CloseAmount).Append("\n");
            sb.Append("  CloseTo: ").Append(CloseTo).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionAssetTransfer);
        }

        /// <summary>
        /// Returns true if TransactionAssetTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionAssetTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionAssetTransfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.CloseAmount == input.CloseAmount ||
                    (this.CloseAmount != null &&
                    this.CloseAmount.Equals(input.CloseAmount))
                ) && 
                (
                    this.CloseTo == input.CloseTo ||
                    (this.CloseTo != null &&
                    this.CloseTo.Equals(input.CloseTo))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AssetId != null)
                    hashCode = hashCode * 59 + this.AssetId.GetHashCode();
                if (this.CloseAmount != null)
                    hashCode = hashCode * 59 + this.CloseAmount.GetHashCode();
                if (this.CloseTo != null)
                    hashCode = hashCode * 59 + this.CloseTo.GetHashCode();
                if (this.Receiver != null)
                    hashCode = hashCode * 59 + this.Receiver.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
