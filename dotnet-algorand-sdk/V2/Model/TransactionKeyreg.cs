/* 
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// Fields for a keyreg transaction.  Definition: data/transactions/keyreg.go : KeyregTxnFields
    /// </summary>
    [DataContract]
        public partial class TransactionKeyreg :  IEquatable<TransactionKeyreg>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionKeyreg" /> class.
        /// </summary>
        /// <param name="nonParticipation">\\[nonpart\\] Mark the account as participating or non-participating..</param>
        /// <param name="selectionParticipationKey">\\[selkey\\] Public key used with the Verified Random Function (VRF) result during committee selection..</param>
        /// <param name="voteFirstValid">\\[votefst\\] First round this participation key is valid..</param>
        /// <param name="voteKeyDilution">\\[votekd\\] Number of subkeys in each batch of participation keys..</param>
        /// <param name="voteLastValid">\\[votelst\\] Last round this participation key is valid..</param>
        /// <param name="voteParticipationKey">\\[votekey\\] Participation public key used in key registration transactions..</param>
        public TransactionKeyreg(bool? nonParticipation = default(bool?), byte[] selectionParticipationKey = default(byte[]), long? voteFirstValid = default, long? voteKeyDilution = default, long? voteLastValid = default, byte[] voteParticipationKey = default(byte[]))
        {
            this.NonParticipation = nonParticipation;
            this.SelectionParticipationKey = selectionParticipationKey;
            this.VoteFirstValid = voteFirstValid;
            this.VoteKeyDilution = voteKeyDilution;
            this.VoteLastValid = voteLastValid;
            this.VoteParticipationKey = voteParticipationKey;
        }
        
        /// <summary>
        /// \\[nonpart\\] Mark the account as participating or non-participating.
        /// </summary>
        /// <value>\\[nonpart\\] Mark the account as participating or non-participating.</value>
        [DataMember(Name="non-participation", EmitDefaultValue=false)]
        public bool? NonParticipation { get; set; }

        /// <summary>
        /// \\[selkey\\] Public key used with the Verified Random Function (VRF) result during committee selection.
        /// </summary>
        /// <value>\\[selkey\\] Public key used with the Verified Random Function (VRF) result during committee selection.</value>
        [DataMember(Name="selection-participation-key", EmitDefaultValue=false)]
        public byte[] SelectionParticipationKey { get; set; }

        /// <summary>
        /// \\[votefst\\] First round this participation key is valid.
        /// </summary>
        /// <value>\\[votefst\\] First round this participation key is valid.</value>
        [DataMember(Name="vote-first-valid", EmitDefaultValue=false)]
        public long? VoteFirstValid { get; set; }

        /// <summary>
        /// \\[votekd\\] Number of subkeys in each batch of participation keys.
        /// </summary>
        /// <value>\\[votekd\\] Number of subkeys in each batch of participation keys.</value>
        [DataMember(Name="vote-key-dilution", EmitDefaultValue=false)]
        public long? VoteKeyDilution { get; set; }

        /// <summary>
        /// \\[votelst\\] Last round this participation key is valid.
        /// </summary>
        /// <value>\\[votelst\\] Last round this participation key is valid.</value>
        [DataMember(Name="vote-last-valid", EmitDefaultValue=false)]
        public long? VoteLastValid { get; set; }

        /// <summary>
        /// \\[votekey\\] Participation public key used in key registration transactions.
        /// </summary>
        /// <value>\\[votekey\\] Participation public key used in key registration transactions.</value>
        [DataMember(Name="vote-participation-key", EmitDefaultValue=false)]
        public byte[] VoteParticipationKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionKeyreg {\n");
            sb.Append("  NonParticipation: ").Append(NonParticipation).Append("\n");
            sb.Append("  SelectionParticipationKey: ").Append(SelectionParticipationKey).Append("\n");
            sb.Append("  VoteFirstValid: ").Append(VoteFirstValid).Append("\n");
            sb.Append("  VoteKeyDilution: ").Append(VoteKeyDilution).Append("\n");
            sb.Append("  VoteLastValid: ").Append(VoteLastValid).Append("\n");
            sb.Append("  VoteParticipationKey: ").Append(VoteParticipationKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionKeyreg);
        }

        /// <summary>
        /// Returns true if TransactionKeyreg instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionKeyreg to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionKeyreg input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NonParticipation == input.NonParticipation ||
                    (this.NonParticipation != null &&
                    this.NonParticipation.Equals(input.NonParticipation))
                ) && 
                (
                    this.SelectionParticipationKey == input.SelectionParticipationKey ||
                    (this.SelectionParticipationKey != null &&
                    this.SelectionParticipationKey.Equals(input.SelectionParticipationKey))
                ) && 
                (
                    this.VoteFirstValid == input.VoteFirstValid ||
                    (this.VoteFirstValid != null &&
                    this.VoteFirstValid.Equals(input.VoteFirstValid))
                ) && 
                (
                    this.VoteKeyDilution == input.VoteKeyDilution ||
                    (this.VoteKeyDilution != null &&
                    this.VoteKeyDilution.Equals(input.VoteKeyDilution))
                ) && 
                (
                    this.VoteLastValid == input.VoteLastValid ||
                    (this.VoteLastValid != null &&
                    this.VoteLastValid.Equals(input.VoteLastValid))
                ) && 
                (
                    this.VoteParticipationKey == input.VoteParticipationKey ||
                    (this.VoteParticipationKey != null &&
                    this.VoteParticipationKey.Equals(input.VoteParticipationKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NonParticipation != null)
                    hashCode = hashCode * 59 + this.NonParticipation.GetHashCode();
                if (this.SelectionParticipationKey != null)
                    hashCode = hashCode * 59 + this.SelectionParticipationKey.GetHashCode();
                if (this.VoteFirstValid != null)
                    hashCode = hashCode * 59 + this.VoteFirstValid.GetHashCode();
                if (this.VoteKeyDilution != null)
                    hashCode = hashCode * 59 + this.VoteKeyDilution.GetHashCode();
                if (this.VoteLastValid != null)
                    hashCode = hashCode * 59 + this.VoteLastValid.GetHashCode();
                if (this.VoteParticipationKey != null)
                    hashCode = hashCode * 59 + this.VoteParticipationKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
