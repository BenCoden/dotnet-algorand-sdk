/* 
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// Fields relating to a protocol upgrade.
    /// </summary>
    [DataContract]
        public partial class BlockUpgradeState :  IEquatable<BlockUpgradeState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockUpgradeState" /> class.
        /// </summary>
        /// <param name="currentProtocol">\\[proto\\] The current protocol version. (required).</param>
        /// <param name="nextProtocol">\\[nextproto\\] The next proposed protocol version..</param>
        /// <param name="nextProtocolApprovals">\\[nextyes\\] Number of blocks which approved the protocol upgrade..</param>
        /// <param name="nextProtocolSwitchOn">\\[nextswitch\\] Round on which the protocol upgrade will take effect..</param>
        /// <param name="nextProtocolVoteBefore">\\[nextbefore\\] Deadline round for this protocol upgrade (No votes will be consider after this round)..</param>
        public BlockUpgradeState(string currentProtocol = default(string), string nextProtocol = default(string), int? nextProtocolApprovals = default(int?), int? nextProtocolSwitchOn = default(int?), int? nextProtocolVoteBefore = default(int?))
        {
            // to ensure "currentProtocol" is required (not null)
            if (currentProtocol == null)
            {
                throw new InvalidDataException("currentProtocol is a required property for BlockUpgradeState and cannot be null");
            }
            else
            {
                this.CurrentProtocol = currentProtocol;
            }
            this.NextProtocol = nextProtocol;
            this.NextProtocolApprovals = nextProtocolApprovals;
            this.NextProtocolSwitchOn = nextProtocolSwitchOn;
            this.NextProtocolVoteBefore = nextProtocolVoteBefore;
        }
        
        /// <summary>
        /// \\[proto\\] The current protocol version.
        /// </summary>
        /// <value>\\[proto\\] The current protocol version.</value>
        [DataMember(Name="current-protocol", EmitDefaultValue=false)]
        public string CurrentProtocol { get; set; }

        /// <summary>
        /// \\[nextproto\\] The next proposed protocol version.
        /// </summary>
        /// <value>\\[nextproto\\] The next proposed protocol version.</value>
        [DataMember(Name="next-protocol", EmitDefaultValue=false)]
        public string NextProtocol { get; set; }

        /// <summary>
        /// \\[nextyes\\] Number of blocks which approved the protocol upgrade.
        /// </summary>
        /// <value>\\[nextyes\\] Number of blocks which approved the protocol upgrade.</value>
        [DataMember(Name="next-protocol-approvals", EmitDefaultValue=false)]
        public int? NextProtocolApprovals { get; set; }

        /// <summary>
        /// \\[nextswitch\\] Round on which the protocol upgrade will take effect.
        /// </summary>
        /// <value>\\[nextswitch\\] Round on which the protocol upgrade will take effect.</value>
        [DataMember(Name="next-protocol-switch-on", EmitDefaultValue=false)]
        public int? NextProtocolSwitchOn { get; set; }

        /// <summary>
        /// \\[nextbefore\\] Deadline round for this protocol upgrade (No votes will be consider after this round).
        /// </summary>
        /// <value>\\[nextbefore\\] Deadline round for this protocol upgrade (No votes will be consider after this round).</value>
        [DataMember(Name="next-protocol-vote-before", EmitDefaultValue=false)]
        public int? NextProtocolVoteBefore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlockUpgradeState {\n");
            sb.Append("  CurrentProtocol: ").Append(CurrentProtocol).Append("\n");
            sb.Append("  NextProtocol: ").Append(NextProtocol).Append("\n");
            sb.Append("  NextProtocolApprovals: ").Append(NextProtocolApprovals).Append("\n");
            sb.Append("  NextProtocolSwitchOn: ").Append(NextProtocolSwitchOn).Append("\n");
            sb.Append("  NextProtocolVoteBefore: ").Append(NextProtocolVoteBefore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockUpgradeState);
        }

        /// <summary>
        /// Returns true if BlockUpgradeState instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockUpgradeState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockUpgradeState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentProtocol == input.CurrentProtocol ||
                    (this.CurrentProtocol != null &&
                    this.CurrentProtocol.Equals(input.CurrentProtocol))
                ) && 
                (
                    this.NextProtocol == input.NextProtocol ||
                    (this.NextProtocol != null &&
                    this.NextProtocol.Equals(input.NextProtocol))
                ) && 
                (
                    this.NextProtocolApprovals == input.NextProtocolApprovals ||
                    (this.NextProtocolApprovals != null &&
                    this.NextProtocolApprovals.Equals(input.NextProtocolApprovals))
                ) && 
                (
                    this.NextProtocolSwitchOn == input.NextProtocolSwitchOn ||
                    (this.NextProtocolSwitchOn != null &&
                    this.NextProtocolSwitchOn.Equals(input.NextProtocolSwitchOn))
                ) && 
                (
                    this.NextProtocolVoteBefore == input.NextProtocolVoteBefore ||
                    (this.NextProtocolVoteBefore != null &&
                    this.NextProtocolVoteBefore.Equals(input.NextProtocolVoteBefore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentProtocol != null)
                    hashCode = hashCode * 59 + this.CurrentProtocol.GetHashCode();
                if (this.NextProtocol != null)
                    hashCode = hashCode * 59 + this.NextProtocol.GetHashCode();
                if (this.NextProtocolApprovals != null)
                    hashCode = hashCode * 59 + this.NextProtocolApprovals.GetHashCode();
                if (this.NextProtocolSwitchOn != null)
                    hashCode = hashCode * 59 + this.NextProtocolSwitchOn.GetHashCode();
                if (this.NextProtocolVoteBefore != null)
                    hashCode = hashCode * 59 + this.NextProtocolVoteBefore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
