/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.
    /// </summary>
    [DataContract]
    public partial class DryrunRequest :  IEquatable<DryrunRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DryrunRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DryrunRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DryrunRequest" /> class.
        /// </summary>
        /// <param name="txns">txns (required).</param>
        /// <param name="accounts">accounts (required).</param>
        /// <param name="apps">apps (required).</param>
        /// <param name="protocolVersion">ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in. (required).</param>
        /// <param name="round">Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to. (required).</param>
        /// <param name="latestTimestamp">LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to. (required).</param>
        /// <param name="sources">sources (required).</param>
        public DryrunRequest(List<string> txns = default(List<string>), List<Account> accounts = default(List<Account>), List<Application> apps = default(List<Application>), string protocolVersion = default(string), ulong? round = default(ulong?), long? latestTimestamp = default(long?), List<DryrunSource> sources = default(List<DryrunSource>))
        {
            // to ensure "txns" is required (not null)
            if (txns == null)
            {
                throw new InvalidDataException("txns is a required property for DryrunRequest and cannot be null");
            }
            else
            {
                this.Txns = txns;
            }
            // to ensure "accounts" is required (not null)
            if (accounts == null)
            {
                throw new InvalidDataException("accounts is a required property for DryrunRequest and cannot be null");
            }
            else
            {
                this.Accounts = accounts;
            }
            // to ensure "apps" is required (not null)
            if (apps == null)
            {
                throw new InvalidDataException("apps is a required property for DryrunRequest and cannot be null");
            }
            else
            {
                this.Apps = apps;
            }
            // to ensure "protocolVersion" is required (not null)
            if (protocolVersion == null)
            {
                throw new InvalidDataException("protocolVersion is a required property for DryrunRequest and cannot be null");
            }
            else
            {
                this.ProtocolVersion = protocolVersion;
            }
            // to ensure "round" is required (not null)
            if (round == null)
            {
                throw new InvalidDataException("round is a required property for DryrunRequest and cannot be null");
            }
            else
            {
                this.Round = round;
            }
            // to ensure "latestTimestamp" is required (not null)
            if (latestTimestamp == null)
            {
                throw new InvalidDataException("latestTimestamp is a required property for DryrunRequest and cannot be null");
            }
            else
            {
                this.LatestTimestamp = latestTimestamp;
            }
            // to ensure "sources" is required (not null)
            if (sources == null)
            {
                throw new InvalidDataException("sources is a required property for DryrunRequest and cannot be null");
            }
            else
            {
                this.Sources = sources;
            }
        }
        
        /// <summary>
        /// Gets or Sets Txns
        /// </summary>
        [DataMember(Name="txns", EmitDefaultValue=false)]
        public List<string> Txns { get; set; }

        /// <summary>
        /// Gets or Sets Accounts
        /// </summary>
        [DataMember(Name="accounts", EmitDefaultValue=false)]
        public List<Account> Accounts { get; set; }

        /// <summary>
        /// Gets or Sets Apps
        /// </summary>
        [DataMember(Name="apps", EmitDefaultValue=false)]
        public List<Application> Apps { get; set; }

        /// <summary>
        /// ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.
        /// </summary>
        /// <value>ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.</value>
        [DataMember(Name="protocol-version", EmitDefaultValue=false)]
        public string ProtocolVersion { get; set; }

        /// <summary>
        /// Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.
        /// </summary>
        /// <value>Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.</value>
        [DataMember(Name="round", EmitDefaultValue=false)]
        public ulong? Round { get; set; }

        /// <summary>
        /// LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.
        /// </summary>
        /// <value>LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.</value>
        [DataMember(Name="latest-timestamp", EmitDefaultValue=false)]
        public long? LatestTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>
        [DataMember(Name="sources", EmitDefaultValue=false)]
        public List<DryrunSource> Sources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DryrunRequest {\n");
            sb.Append("  Txns: ").Append(Txns).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  Apps: ").Append(Apps).Append("\n");
            sb.Append("  ProtocolVersion: ").Append(ProtocolVersion).Append("\n");
            sb.Append("  Round: ").Append(Round).Append("\n");
            sb.Append("  LatestTimestamp: ").Append(LatestTimestamp).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DryrunRequest);
        }

        /// <summary>
        /// Returns true if DryrunRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DryrunRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DryrunRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Txns == input.Txns ||
                    this.Txns != null &&
                    this.Txns.SequenceEqual(input.Txns)
                ) && 
                (
                    this.Accounts == input.Accounts ||
                    this.Accounts != null &&
                    this.Accounts.SequenceEqual(input.Accounts)
                ) && 
                (
                    this.Apps == input.Apps ||
                    this.Apps != null &&
                    this.Apps.SequenceEqual(input.Apps)
                ) && 
                (
                    this.ProtocolVersion == input.ProtocolVersion ||
                    (this.ProtocolVersion != null &&
                    this.ProtocolVersion.Equals(input.ProtocolVersion))
                ) && 
                (
                    this.Round == input.Round ||
                    (this.Round != null &&
                    this.Round.Equals(input.Round))
                ) && 
                (
                    this.LatestTimestamp == input.LatestTimestamp ||
                    (this.LatestTimestamp != null &&
                    this.LatestTimestamp.Equals(input.LatestTimestamp))
                ) && 
                (
                    this.Sources == input.Sources ||
                    this.Sources != null &&
                    this.Sources.SequenceEqual(input.Sources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Txns != null)
                    hashCode = hashCode * 59 + this.Txns.GetHashCode();
                if (this.Accounts != null)
                    hashCode = hashCode * 59 + this.Accounts.GetHashCode();
                if (this.Apps != null)
                    hashCode = hashCode * 59 + this.Apps.GetHashCode();
                if (this.ProtocolVersion != null)
                    hashCode = hashCode * 59 + this.ProtocolVersion.GetHashCode();
                if (this.Round != null)
                    hashCode = hashCode * 59 + this.Round.GetHashCode();
                if (this.LatestTimestamp != null)
                    hashCode = hashCode * 59 + this.LatestTimestamp.GetHashCode();
                if (this.Sources != null)
                    hashCode = hashCode * 59 + this.Sources.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
