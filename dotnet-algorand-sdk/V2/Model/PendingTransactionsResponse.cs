/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// PendingTransactions is an array of signed transactions exactly as they were submitted.
    /// </summary>
    [DataContract]
    public partial class PendingTransactionsResponse :  IEquatable<PendingTransactionsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PendingTransactionsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PendingTransactionsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PendingTransactionsResponse" /> class.
        /// </summary>
        /// <param name="topTransactions">An array of signed transaction objects. (required).</param>
        /// <param name="totalTransactions">Total number of transactions in the pool. (required).</param>
        public PendingTransactionsResponse(List<Object> topTransactions = default(List<Object>), long? totalTransactions = default)
        {
            // to ensure "topTransactions" is required (not null)
            if (topTransactions == null)
            {
                throw new InvalidDataException("topTransactions is a required property for PendingTransactionsResponse and cannot be null");
            }
            else
            {
                this.TopTransactions = topTransactions;
            }
            // to ensure "totalTransactions" is required (not null)
            if (totalTransactions == null)
            {
                throw new InvalidDataException("totalTransactions is a required property for PendingTransactionsResponse and cannot be null");
            }
            else
            {
                this.TotalTransactions = totalTransactions;
            }
        }
        
        /// <summary>
        /// An array of signed transaction objects.
        /// </summary>
        /// <value>An array of signed transaction objects.</value>
        [DataMember(Name="top-transactions", EmitDefaultValue=false)]
        public List<Object> TopTransactions { get; set; }

        /// <summary>
        /// Total number of transactions in the pool.
        /// </summary>
        /// <value>Total number of transactions in the pool.</value>
        [DataMember(Name="total-transactions", EmitDefaultValue=false)]
        public long? TotalTransactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PendingTransactionsResponse {\n");
            sb.Append("  TopTransactions: ").Append(TopTransactions).Append("\n");
            sb.Append("  TotalTransactions: ").Append(TotalTransactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PendingTransactionsResponse);
        }

        /// <summary>
        /// Returns true if PendingTransactionsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PendingTransactionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PendingTransactionsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TopTransactions == input.TopTransactions ||
                    this.TopTransactions != null &&
                    this.TopTransactions.SequenceEqual(input.TopTransactions)
                ) && 
                (
                    this.TotalTransactions == input.TotalTransactions ||
                    (this.TotalTransactions != null &&
                    this.TotalTransactions.Equals(input.TotalTransactions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TopTransactions != null)
                    hashCode = hashCode * 59 + this.TopTransactions.GetHashCode();
                if (this.TotalTransactions != null)
                    hashCode = hashCode * 59 + this.TotalTransactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
