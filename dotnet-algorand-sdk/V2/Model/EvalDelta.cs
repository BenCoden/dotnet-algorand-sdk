/* 
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// Represents a TEAL value delta.
    /// </summary>
    [DataContract]
    public partial class EvalDelta :  IEquatable<EvalDelta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvalDelta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EvalDelta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EvalDelta" /> class.
        /// </summary>
        /// <param name="action">\\[at\\] delta action. (required).</param>
        /// <param name="bytes">\\[bs\\] bytes value..</param>
        /// <param name="_uint">\\[ui\\] uint value..</param>
        public EvalDelta(long? action = default, string bytes = default(string), ulong? _uint = default(ulong?))
        {
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for EvalDelta and cannot be null");
            }
            else
            {
                this.Action = action;
            }
            this.Bytes = bytes;
            this.Uint = _uint;
        }
        
        /// <summary>
        /// \\[at\\] delta action.
        /// </summary>
        /// <value>\\[at\\] delta action.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public long? Action { get; set; }

        /// <summary>
        /// \\[bs\\] bytes value.
        /// </summary>
        /// <value>\\[bs\\] bytes value.</value>
        [DataMember(Name="bytes", EmitDefaultValue=false)]
        public string Bytes { get; set; }

        /// <summary>
        /// \\[ui\\] uint value.
        /// </summary>
        /// <value>\\[ui\\] uint value.</value>
        [DataMember(Name="uint", EmitDefaultValue=false)]
        public ulong? Uint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvalDelta {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Bytes: ").Append(Bytes).Append("\n");
            sb.Append("  Uint: ").Append(Uint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvalDelta);
        }

        /// <summary>
        /// Returns true if EvalDelta instances are equal
        /// </summary>
        /// <param name="input">Instance of EvalDelta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvalDelta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Bytes == input.Bytes ||
                    (this.Bytes != null &&
                    this.Bytes.Equals(input.Bytes))
                ) && 
                (
                    this.Uint == input.Uint ||
                    (this.Uint != null &&
                    this.Uint.Equals(input.Uint))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Bytes != null)
                    hashCode = hashCode * 59 + this.Bytes.GetHashCode();
                if (this.Uint != null)
                    hashCode = hashCode * 59 + this.Uint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
