/* 
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// Block information.  Definition: data/bookkeeping/block.go : Block
    /// </summary>
    [DataContract]
        public partial class Block :  IEquatable<Block>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Block" /> class.
        /// </summary>
        /// <param name="genesisHash">\\[gh\\] hash to which this block belongs. (required).</param>
        /// <param name="genesisId">\\[gen\\] ID to which this block belongs. (required).</param>
        /// <param name="previousBlockHash">\\[prev\\] Previous block hash. (required).</param>
        /// <param name="rewards">rewards.</param>
        /// <param name="round">\\[rnd\\] Current round on which this block was appended to the chain. (required).</param>
        /// <param name="seed">\\[seed\\] Sortition seed. (required).</param>
        /// <param name="timestamp">\\[ts\\] Block creation timestamp in seconds since eposh (required).</param>
        /// <param name="transactions">\\[txns\\] list of transactions corresponding to a given round..</param>
        /// <param name="transactionsRoot">\\[txn\\] TransactionsRoot authenticates the set of transactions appearing in the block. More specifically, it&#x27;s the root of a merkle tree whose leaves are the block&#x27;s Txids, in lexicographic order. For the empty block, it&#x27;s 0. Note that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves. Two blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot. (required).</param>
        /// <param name="txnCounter">\\[tc\\] TxnCounter counts the number of transactions committed in the ledger, from the time at which support for this feature was introduced.  Specifically, TxnCounter is the number of the next transaction that will be committed after this block.  It is 0 when no transactions have ever been committed (since TxnCounter started being supported)..</param>
        /// <param name="upgradeState">upgradeState.</param>
        /// <param name="upgradeVote">upgradeVote.</param>
        public Block(byte[] genesisHash = default(byte[]), string genesisId = default(string), byte[] previousBlockHash = default(byte[]), BlockRewards rewards = default(BlockRewards), int? round = default(int?), byte[] seed = default(byte[]), int? timestamp = default(int?), List<Transaction> transactions = default(List<Transaction>), byte[] transactionsRoot = default(byte[]), int? txnCounter = default(int?), BlockUpgradeState upgradeState = default(BlockUpgradeState), BlockUpgradeVote upgradeVote = default(BlockUpgradeVote))
        {
            // to ensure "genesisHash" is required (not null)
            if (genesisHash == null)
            {
                throw new InvalidDataException("genesisHash is a required property for Block and cannot be null");
            }
            else
            {
                this.GenesisHash = genesisHash;
            }
            // to ensure "genesisId" is required (not null)
            if (genesisId == null)
            {
                throw new InvalidDataException("genesisId is a required property for Block and cannot be null");
            }
            else
            {
                this.GenesisId = genesisId;
            }
            // to ensure "previousBlockHash" is required (not null)
            if (previousBlockHash == null)
            {
                throw new InvalidDataException("previousBlockHash is a required property for Block and cannot be null");
            }
            else
            {
                this.PreviousBlockHash = previousBlockHash;
            }
            // to ensure "round" is required (not null)
            if (round == null)
            {
                throw new InvalidDataException("round is a required property for Block and cannot be null");
            }
            else
            {
                this.Round = round;
            }
            // to ensure "seed" is required (not null)
            if (seed == null)
            {
                throw new InvalidDataException("seed is a required property for Block and cannot be null");
            }
            else
            {
                this.Seed = seed;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for Block and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "transactionsRoot" is required (not null)
            if (transactionsRoot == null)
            {
                throw new InvalidDataException("transactionsRoot is a required property for Block and cannot be null");
            }
            else
            {
                this.TransactionsRoot = transactionsRoot;
            }
            this.Rewards = rewards;
            this.Transactions = transactions;
            this.TxnCounter = txnCounter;
            this.UpgradeState = upgradeState;
            this.UpgradeVote = upgradeVote;
        }
        
        /// <summary>
        /// \\[gh\\] hash to which this block belongs.
        /// </summary>
        /// <value>\\[gh\\] hash to which this block belongs.</value>
        [DataMember(Name="genesis-hash", EmitDefaultValue=false)]
        public byte[] GenesisHash { get; set; }

        /// <summary>
        /// \\[gen\\] ID to which this block belongs.
        /// </summary>
        /// <value>\\[gen\\] ID to which this block belongs.</value>
        [DataMember(Name="genesis-id", EmitDefaultValue=false)]
        public string GenesisId { get; set; }

        /// <summary>
        /// \\[prev\\] Previous block hash.
        /// </summary>
        /// <value>\\[prev\\] Previous block hash.</value>
        [DataMember(Name="previous-block-hash", EmitDefaultValue=false)]
        public byte[] PreviousBlockHash { get; set; }

        /// <summary>
        /// Gets or Sets Rewards
        /// </summary>
        [DataMember(Name="rewards", EmitDefaultValue=false)]
        public BlockRewards Rewards { get; set; }

        /// <summary>
        /// \\[rnd\\] Current round on which this block was appended to the chain.
        /// </summary>
        /// <value>\\[rnd\\] Current round on which this block was appended to the chain.</value>
        [DataMember(Name="round", EmitDefaultValue=false)]
        public int? Round { get; set; }

        /// <summary>
        /// \\[seed\\] Sortition seed.
        /// </summary>
        /// <value>\\[seed\\] Sortition seed.</value>
        [DataMember(Name="seed", EmitDefaultValue=false)]
        public byte[] Seed { get; set; }

        /// <summary>
        /// \\[ts\\] Block creation timestamp in seconds since eposh
        /// </summary>
        /// <value>\\[ts\\] Block creation timestamp in seconds since eposh</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }

        /// <summary>
        /// \\[txns\\] list of transactions corresponding to a given round.
        /// </summary>
        /// <value>\\[txns\\] list of transactions corresponding to a given round.</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<Transaction> Transactions { get; set; }

        /// <summary>
        /// \\[txn\\] TransactionsRoot authenticates the set of transactions appearing in the block. More specifically, it&#x27;s the root of a merkle tree whose leaves are the block&#x27;s Txids, in lexicographic order. For the empty block, it&#x27;s 0. Note that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves. Two blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot.
        /// </summary>
        /// <value>\\[txn\\] TransactionsRoot authenticates the set of transactions appearing in the block. More specifically, it&#x27;s the root of a merkle tree whose leaves are the block&#x27;s Txids, in lexicographic order. For the empty block, it&#x27;s 0. Note that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves. Two blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot.</value>
        [DataMember(Name="transactions-root", EmitDefaultValue=false)]
        public byte[] TransactionsRoot { get; set; }

        /// <summary>
        /// \\[tc\\] TxnCounter counts the number of transactions committed in the ledger, from the time at which support for this feature was introduced.  Specifically, TxnCounter is the number of the next transaction that will be committed after this block.  It is 0 when no transactions have ever been committed (since TxnCounter started being supported).
        /// </summary>
        /// <value>\\[tc\\] TxnCounter counts the number of transactions committed in the ledger, from the time at which support for this feature was introduced.  Specifically, TxnCounter is the number of the next transaction that will be committed after this block.  It is 0 when no transactions have ever been committed (since TxnCounter started being supported).</value>
        [DataMember(Name="txn-counter", EmitDefaultValue=false)]
        public int? TxnCounter { get; set; }

        /// <summary>
        /// Gets or Sets UpgradeState
        /// </summary>
        [DataMember(Name="upgrade-state", EmitDefaultValue=false)]
        public BlockUpgradeState UpgradeState { get; set; }

        /// <summary>
        /// Gets or Sets UpgradeVote
        /// </summary>
        [DataMember(Name="upgrade-vote", EmitDefaultValue=false)]
        public BlockUpgradeVote UpgradeVote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Block {\n");
            sb.Append("  GenesisHash: ").Append(GenesisHash).Append("\n");
            sb.Append("  GenesisId: ").Append(GenesisId).Append("\n");
            sb.Append("  PreviousBlockHash: ").Append(PreviousBlockHash).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("  Round: ").Append(Round).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  TransactionsRoot: ").Append(TransactionsRoot).Append("\n");
            sb.Append("  TxnCounter: ").Append(TxnCounter).Append("\n");
            sb.Append("  UpgradeState: ").Append(UpgradeState).Append("\n");
            sb.Append("  UpgradeVote: ").Append(UpgradeVote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Block);
        }

        /// <summary>
        /// Returns true if Block instances are equal
        /// </summary>
        /// <param name="input">Instance of Block to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Block input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GenesisHash == input.GenesisHash ||
                    (this.GenesisHash != null &&
                    this.GenesisHash.Equals(input.GenesisHash))
                ) && 
                (
                    this.GenesisId == input.GenesisId ||
                    (this.GenesisId != null &&
                    this.GenesisId.Equals(input.GenesisId))
                ) && 
                (
                    this.PreviousBlockHash == input.PreviousBlockHash ||
                    (this.PreviousBlockHash != null &&
                    this.PreviousBlockHash.Equals(input.PreviousBlockHash))
                ) && 
                (
                    this.Rewards == input.Rewards ||
                    (this.Rewards != null &&
                    this.Rewards.Equals(input.Rewards))
                ) && 
                (
                    this.Round == input.Round ||
                    (this.Round != null &&
                    this.Round.Equals(input.Round))
                ) && 
                (
                    this.Seed == input.Seed ||
                    (this.Seed != null &&
                    this.Seed.Equals(input.Seed))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.TransactionsRoot == input.TransactionsRoot ||
                    (this.TransactionsRoot != null &&
                    this.TransactionsRoot.Equals(input.TransactionsRoot))
                ) && 
                (
                    this.TxnCounter == input.TxnCounter ||
                    (this.TxnCounter != null &&
                    this.TxnCounter.Equals(input.TxnCounter))
                ) && 
                (
                    this.UpgradeState == input.UpgradeState ||
                    (this.UpgradeState != null &&
                    this.UpgradeState.Equals(input.UpgradeState))
                ) && 
                (
                    this.UpgradeVote == input.UpgradeVote ||
                    (this.UpgradeVote != null &&
                    this.UpgradeVote.Equals(input.UpgradeVote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GenesisHash != null)
                    hashCode = hashCode * 59 + this.GenesisHash.GetHashCode();
                if (this.GenesisId != null)
                    hashCode = hashCode * 59 + this.GenesisId.GetHashCode();
                if (this.PreviousBlockHash != null)
                    hashCode = hashCode * 59 + this.PreviousBlockHash.GetHashCode();
                if (this.Rewards != null)
                    hashCode = hashCode * 59 + this.Rewards.GetHashCode();
                if (this.Round != null)
                    hashCode = hashCode * 59 + this.Round.GetHashCode();
                if (this.Seed != null)
                    hashCode = hashCode * 59 + this.Seed.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.TransactionsRoot != null)
                    hashCode = hashCode * 59 + this.TransactionsRoot.GetHashCode();
                if (this.TxnCounter != null)
                    hashCode = hashCode * 59 + this.TxnCounter.GetHashCode();
                if (this.UpgradeState != null)
                    hashCode = hashCode * 59 + this.UpgradeState.GetHashCode();
                if (this.UpgradeVote != null)
                    hashCode = hashCode * 59 + this.UpgradeVote.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
