/* 
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// \\[msig\\] structure holding multiple subsignatures.  Definition: crypto/multisig.go : MultisigSig
    /// </summary>
    [DataContract]
        public partial class TransactionSignatureMultisig :  IEquatable<TransactionSignatureMultisig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSignatureMultisig" /> class.
        /// </summary>
        /// <param name="subsignature">\\[subsig\\] holds pairs of public key and signatures..</param>
        /// <param name="threshold">\\[thr\\].</param>
        /// <param name="version">\\[v\\].</param>
        public TransactionSignatureMultisig(List<TransactionSignatureMultisigSubsignature> subsignature = default(List<TransactionSignatureMultisigSubsignature>), long? threshold = default, long? version = default)
        {
            this.Subsignature = subsignature;
            this.Threshold = threshold;
            this.Version = version;
        }
        
        /// <summary>
        /// \\[subsig\\] holds pairs of public key and signatures.
        /// </summary>
        /// <value>\\[subsig\\] holds pairs of public key and signatures.</value>
        [DataMember(Name="subsignature", EmitDefaultValue=false)]
        public List<TransactionSignatureMultisigSubsignature> Subsignature { get; set; }

        /// <summary>
        /// \\[thr\\]
        /// </summary>
        /// <value>\\[thr\\]</value>
        [DataMember(Name="threshold", EmitDefaultValue=false)]
        public long? Threshold { get; set; }

        /// <summary>
        /// \\[v\\]
        /// </summary>
        /// <value>\\[v\\]</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public long? Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionSignatureMultisig {\n");
            sb.Append("  Subsignature: ").Append(Subsignature).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionSignatureMultisig);
        }

        /// <summary>
        /// Returns true if TransactionSignatureMultisig instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSignatureMultisig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSignatureMultisig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Subsignature == input.Subsignature ||
                    this.Subsignature != null &&
                    input.Subsignature != null &&
                    this.Subsignature.SequenceEqual(input.Subsignature)
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    (this.Threshold != null &&
                    this.Threshold.Equals(input.Threshold))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subsignature != null)
                    hashCode = hashCode * 59 + this.Subsignature.GetHashCode();
                if (this.Threshold != null)
                    hashCode = hashCode * 59 + this.Threshold.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
