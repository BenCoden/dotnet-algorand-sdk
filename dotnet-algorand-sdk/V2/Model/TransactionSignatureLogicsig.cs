/* 
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// \\[lsig\\] Programatic transaction signature.  Definition: data/transactions/logicsig.go
    /// </summary>
    [DataContract]
        public partial class TransactionSignatureLogicsig :  IEquatable<TransactionSignatureLogicsig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSignatureLogicsig" /> class.
        /// </summary>
        /// <param name="args">\\[arg\\] Logic arguments, base64 encoded..</param>
        /// <param name="logic">\\[l\\] Program signed by a signature or multi signature, or hashed to be the address of ana ccount. Base64 encoded TEAL program. (required).</param>
        /// <param name="multisigSignature">multisigSignature.</param>
        /// <param name="signature">\\[sig\\] ed25519 signature..</param>
        public TransactionSignatureLogicsig(List<string> args = default(List<string>), byte[] logic = default(byte[]), TransactionSignatureMultisig multisigSignature = default(TransactionSignatureMultisig), byte[] signature = default(byte[]))
        {
            // to ensure "logic" is required (not null)
            if (logic == null)
            {
                throw new InvalidDataException("logic is a required property for TransactionSignatureLogicsig and cannot be null");
            }
            else
            {
                this.Logic = logic;
            }
            this.Args = args;
            this.MultisigSignature = multisigSignature;
            this.Signature = signature;
        }
        
        /// <summary>
        /// \\[arg\\] Logic arguments, base64 encoded.
        /// </summary>
        /// <value>\\[arg\\] Logic arguments, base64 encoded.</value>
        [DataMember(Name="args", EmitDefaultValue=false)]
        public List<string> Args { get; set; }

        /// <summary>
        /// \\[l\\] Program signed by a signature or multi signature, or hashed to be the address of ana ccount. Base64 encoded TEAL program.
        /// </summary>
        /// <value>\\[l\\] Program signed by a signature or multi signature, or hashed to be the address of ana ccount. Base64 encoded TEAL program.</value>
        [DataMember(Name="logic", EmitDefaultValue=false)]
        public byte[] Logic { get; set; }

        /// <summary>
        /// Gets or Sets MultisigSignature
        /// </summary>
        [DataMember(Name="multisig-signature", EmitDefaultValue=false)]
        public TransactionSignatureMultisig MultisigSignature { get; set; }

        /// <summary>
        /// \\[sig\\] ed25519 signature.
        /// </summary>
        /// <value>\\[sig\\] ed25519 signature.</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public byte[] Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionSignatureLogicsig {\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Logic: ").Append(Logic).Append("\n");
            sb.Append("  MultisigSignature: ").Append(MultisigSignature).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionSignatureLogicsig);
        }

        /// <summary>
        /// Returns true if TransactionSignatureLogicsig instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionSignatureLogicsig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSignatureLogicsig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Args == input.Args ||
                    this.Args != null &&
                    input.Args != null &&
                    this.Args.SequenceEqual(input.Args)
                ) && 
                (
                    this.Logic == input.Logic ||
                    (this.Logic != null &&
                    this.Logic.Equals(input.Logic))
                ) && 
                (
                    this.MultisigSignature == input.MultisigSignature ||
                    (this.MultisigSignature != null &&
                    this.MultisigSignature.Equals(input.MultisigSignature))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Args != null)
                    hashCode = hashCode * 59 + this.Args.GetHashCode();
                if (this.Logic != null)
                    hashCode = hashCode * 59 + this.Logic.GetHashCode();
                if (this.MultisigSignature != null)
                    hashCode = hashCode * 59 + this.MultisigSignature.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
