/* 
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Algorand.V2.Client.SwaggerDateConverter;

namespace Algorand.V2.Model
{
    /// <summary>
    /// Fields for a payment transaction.  Definition: data/transactions/payment.go : PaymentTxnFields
    /// </summary>
    [DataContract]
        public partial class TransactionPayment :  IEquatable<TransactionPayment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionPayment" /> class.
        /// </summary>
        /// <param name="amount">\\[amt\\] number of MicroAlgos intended to be transferred. (required).</param>
        /// <param name="closeAmount">Number of MicroAlgos that were sent to the close-remainder-to address when closing the sender account..</param>
        /// <param name="closeRemainderTo">\\[close\\] when set, indicates that the sending account should be closed and all remaining funds be transferred to this address..</param>
        /// <param name="receiver">\\[rcv\\] receiver&#x27;s address. (required).</param>
        public TransactionPayment(long? amount = default, long? closeAmount = default, string closeRemainderTo = default(string), string receiver = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for TransactionPayment and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new InvalidDataException("receiver is a required property for TransactionPayment and cannot be null");
            }
            else
            {
                this.Receiver = receiver;
            }
            this.CloseAmount = closeAmount;
            this.CloseRemainderTo = closeRemainderTo;
        }
        
        /// <summary>
        /// \\[amt\\] number of MicroAlgos intended to be transferred.
        /// </summary>
        /// <value>\\[amt\\] number of MicroAlgos intended to be transferred.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public long? Amount { get; set; }

        /// <summary>
        /// Number of MicroAlgos that were sent to the close-remainder-to address when closing the sender account.
        /// </summary>
        /// <value>Number of MicroAlgos that were sent to the close-remainder-to address when closing the sender account.</value>
        [DataMember(Name="close-amount", EmitDefaultValue=false)]
        public long? CloseAmount { get; set; }

        /// <summary>
        /// \\[close\\] when set, indicates that the sending account should be closed and all remaining funds be transferred to this address.
        /// </summary>
        /// <value>\\[close\\] when set, indicates that the sending account should be closed and all remaining funds be transferred to this address.</value>
        [DataMember(Name="close-remainder-to", EmitDefaultValue=false)]
        public string CloseRemainderTo { get; set; }

        /// <summary>
        /// \\[rcv\\] receiver&#x27;s address.
        /// </summary>
        /// <value>\\[rcv\\] receiver&#x27;s address.</value>
        [DataMember(Name="receiver", EmitDefaultValue=false)]
        public string Receiver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionPayment {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CloseAmount: ").Append(CloseAmount).Append("\n");
            sb.Append("  CloseRemainderTo: ").Append(CloseRemainderTo).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionPayment);
        }

        /// <summary>
        /// Returns true if TransactionPayment instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionPayment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CloseAmount == input.CloseAmount ||
                    (this.CloseAmount != null &&
                    this.CloseAmount.Equals(input.CloseAmount))
                ) && 
                (
                    this.CloseRemainderTo == input.CloseRemainderTo ||
                    (this.CloseRemainderTo != null &&
                    this.CloseRemainderTo.Equals(input.CloseRemainderTo))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CloseAmount != null)
                    hashCode = hashCode * 59 + this.CloseAmount.GetHashCode();
                if (this.CloseRemainderTo != null)
                    hashCode = hashCode * 59 + this.CloseRemainderTo.GetHashCode();
                if (this.Receiver != null)
                    hashCode = hashCode * 59 + this.Receiver.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
